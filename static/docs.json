{
  "docs": [
    {
      "comment": "/**\n * @typedef {Object} Web3Connection~Optional\n * @property {string} web3Connection Web3 Connection String (Ex : https://data-seed-prebsc-1-s1.binance.org:8545)\n * @property {string} privateKey Private key (0x....) used for server side use\n */",
      "meta": {
        "filename": "Web3Connection.js",
        "lineno": 20,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src",
        "code": {}
      },
      "kind": "typedef",
      "name": "Optional",
      "type": {
        "names": [
          "Object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Web3 Connection String (Ex : https://data-seed-prebsc-1-s1.binance.org:8545)",
          "name": "web3Connection"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Private key (0x....) used for server side use",
          "name": "privateKey"
        }
      ],
      "memberof": "Web3Connection",
      "longname": "Web3Connection~Optional",
      "scope": "inner",
      "___id": "T000002R000015",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef {Object} Web3Connection~Options\n * @property {boolean} [test=false] Automated Tests\n * @property {boolean} [localtest=false] Ganache Local Blockchain\n * @property {Web3Connection~Optional} [opt] Optional Chain Connection Object (Default ETH)\n */",
      "meta": {
        "filename": "Web3Connection.js",
        "lineno": 26,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src",
        "code": {}
      },
      "kind": "typedef",
      "name": "Options",
      "type": {
        "names": [
          "Object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Automated Tests",
          "name": "test"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Ganache Local Blockchain",
          "name": "localtest"
        },
        {
          "type": {
            "names": [
              "Web3Connection~Optional"
            ]
          },
          "optional": true,
          "description": "Optional Chain Connection Object (Default ETH)",
          "name": "opt"
        }
      ],
      "memberof": "Web3Connection",
      "longname": "Web3Connection~Options",
      "scope": "inner",
      "___id": "T000002R000016",
      "___s": true
    },
    {
      "comment": "/**\n * Web3Connection Object\n * @class Web3Connection\n * @param {Web3Connection~Options} options\n */",
      "meta": {
        "filename": "Web3Connection.js",
        "lineno": 33,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src",
        "code": {}
      },
      "description": "Web3Connection Object",
      "kind": "class",
      "name": "Web3Connection",
      "params": [
        {
          "type": {
            "names": [
              "Web3Connection~Options"
            ]
          },
          "name": "options"
        }
      ],
      "longname": "Web3Connection",
      "scope": "global",
      "___id": "T000002R000017",
      "___s": true
    },
    {
      "comment": "/**\n   * Connect to Web3 injected in the constructor\n   * @function\n   * @throws {Error} Please Use an Ethereum Enabled Browser like Metamask or Coinbase Wallet\n   * @void\n   */",
      "meta": {
        "range": [
          2050,
          3022
        ],
        "filename": "Web3Connection.js",
        "lineno": 69,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src",
        "code": {
          "id": "astnode100000142",
          "name": "Web3Connection#start",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Connect to Web3 injected in the constructor",
      "kind": "function",
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Please Use an Ethereum Enabled Browser like Metamask or Coinbase Wallet"
        }
      ],
      "tags": [
        {
          "originalTitle": "void",
          "title": "void",
          "text": ""
        }
      ],
      "name": "start",
      "longname": "Web3Connection#start",
      "memberof": "Web3Connection",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000029",
      "___s": true
    },
    {
      "comment": "/**\n   * Login with Metamask/Web3 Wallet - substitutes start()\n   * @function\n   * @return {Promise<boolean>}\n   */",
      "meta": {
        "range": [
          3144,
          3489
        ],
        "filename": "Web3Connection.js",
        "lineno": 104,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src",
        "code": {
          "id": "astnode100000279",
          "name": "Web3Connection#login",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Login with Metamask/Web3 Wallet - substitutes start()",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<boolean>"
            ]
          }
        }
      ],
      "name": "login",
      "longname": "Web3Connection#login",
      "memberof": "Web3Connection",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000036",
      "___s": true
    },
    {
      "comment": "/**\n   * Get ETH Network\n   * @function\n   * @return {Promise<string>} Network Name (Ex : Kovan)\n   */",
      "meta": {
        "range": [
          3644,
          3947
        ],
        "filename": "Web3Connection.js",
        "lineno": 130,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src",
        "code": {
          "id": "astnode100000331",
          "name": "Web3Connection#getETHNetwork",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get ETH Network",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<string>"
            ]
          },
          "description": "Network Name (Ex : Kovan)"
        }
      ],
      "name": "getETHNetwork",
      "longname": "Web3Connection#getETHNetwork",
      "memberof": "Web3Connection",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000039",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Address connected via login()\n   * @function\n   * @return {Promise<string>} Address in Use\n   */",
      "meta": {
        "range": [
          4063,
          4224
        ],
        "filename": "Web3Connection.js",
        "lineno": 144,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src",
        "code": {
          "id": "astnode100000371",
          "name": "Web3Connection#getAddress",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Address connected via login()",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<string>"
            ]
          },
          "description": "Address in Use"
        }
      ],
      "name": "getAddress",
      "longname": "Web3Connection#getAddress",
      "memberof": "Web3Connection",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000042",
      "___s": true
    },
    {
      "comment": "/**\n   * Get ETH Balance of Address connected via login()\n   * @function\n   * @return {Promise<string>} ETH Balance\n   */",
      "meta": {
        "range": [
          4352,
          4502
        ],
        "filename": "Web3Connection.js",
        "lineno": 156,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src",
        "code": {
          "id": "astnode100000402",
          "name": "Web3Connection#getETHBalance",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get ETH Balance of Address connected via login()",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<string>"
            ]
          },
          "description": "ETH Balance"
        }
      ],
      "name": "getETHBalance",
      "longname": "Web3Connection#getETHBalance",
      "memberof": "Web3Connection",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000044",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Web3 to access functions as https://ethereum.stackexchange.com/questions/66454/how-to-get-events-emitted-by-a-transaction-with-web3-js\n   * @function\n   * @return {Web3} Web3\n   */",
      "meta": {
        "range": [
          4702,
          4745
        ],
        "filename": "Web3Connection.js",
        "lineno": 166,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src",
        "code": {
          "id": "astnode100000434",
          "name": "Web3Connection#getWeb3",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Web3 to access functions as https://ethereum.stackexchange.com/questions/66454/how-to-get-events-emitted-by-a-transaction-with-web3-js",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Web3"
            ]
          },
          "description": "Web3"
        }
      ],
      "name": "getWeb3",
      "longname": "Web3Connection#getWeb3",
      "memberof": "Web3Connection",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000046",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef {Object} Network~Options\n * @property {Boolean} test\n * @property {Boolean} localtest ganache local blockchain\n * @property {Web3Connection} [web3Connection=Web3Connection] created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'\n * @property {string} [contractAddress]\n */",
      "meta": {
        "filename": "Network.js",
        "lineno": 9,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {}
      },
      "kind": "typedef",
      "name": "Options",
      "type": {
        "names": [
          "Object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "name": "test"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "ganache local blockchain",
          "name": "localtest"
        },
        {
          "type": {
            "names": [
              "Web3Connection"
            ]
          },
          "optional": true,
          "defaultvalue": "Web3Connection",
          "description": "created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'",
          "name": "web3Connection"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "name": "contractAddress"
        }
      ],
      "memberof": "Network",
      "longname": "Network~Options",
      "scope": "inner",
      "___id": "T000002R000068",
      "___s": true
    },
    {
      "comment": "/**\n * Network Object\n * @class Network\n * @param {Network~Options} options\n */",
      "meta": {
        "filename": "Network.js",
        "lineno": 17,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {}
      },
      "description": "Network Object",
      "kind": "class",
      "name": "Network",
      "params": [
        {
          "type": {
            "names": [
              "Network~Options"
            ]
          },
          "name": "options"
        }
      ],
      "longname": "Network",
      "scope": "global",
      "___id": "T000002R000069",
      "___s": true
    },
    {
      "comment": "/**\n   * Asserts the 2 {@link ERC20Contract} on the current address\n   * @function\n   * @return {Promise<void>}\n   * @throws {Error} Contract is not deployed, first deploy it and provide a contract address\n   */",
      "meta": {
        "range": [
          994,
          2063
        ],
        "filename": "Network.js",
        "lineno": 35,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100000593",
          "name": "__assert",
          "type": "ClassProperty"
        }
      },
      "description": "Asserts the 2 {@link ERC20Contract} on the current address",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<void>"
            ]
          }
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Contract is not deployed, first deploy it and provide a contract address"
        }
      ],
      "name": "__assert",
      "longname": "Network#__assert",
      "memberof": "Network",
      "scope": "instance",
      "___id": "T000002R000073",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Open Issues Available\n   * @param {Address} address\n   * @returns {number[]}\n   */",
      "meta": {
        "range": [
          2165,
          2369
        ],
        "filename": "Network.js",
        "lineno": 73,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100000715",
          "name": "Network#getIssuesByAddress",
          "type": "MethodDefinition",
          "paramnames": [
            "address"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Open Issues Available",
      "params": [
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          }
        }
      ],
      "name": "getIssuesByAddress",
      "longname": "Network#getIssuesByAddress",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000082",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Amount of Issues Opened in the network\n   * @returns {Promise<number>}\n   */",
      "meta": {
        "range": [
          2465,
          2622
        ],
        "filename": "Network.js",
        "lineno": 86,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100000752",
          "name": "Network#getAmountofIssuesOpened",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Amount of Issues Opened in the network",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "getAmountofIssuesOpened",
      "longname": "Network#getAmountofIssuesOpened",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000084",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Amount of Issues Closed in the network\n   * @returns {Promise<number>}\n   */",
      "meta": {
        "range": [
          2718,
          2873
        ],
        "filename": "Network.js",
        "lineno": 97,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100000777",
          "name": "Network#getAmountofIssuesClosed",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Amount of Issues Closed in the network",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "getAmountofIssuesClosed",
      "longname": "Network#getAmountofIssuesClosed",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000085",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Amount of Disputers (people who locked BEPRO) in the network\n   * @returns {Promise<number>}\n   */",
      "meta": {
        "range": [
          2991,
          3142
        ],
        "filename": "Network.js",
        "lineno": 108,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100000802",
          "name": "Network#getAmountOfDisputers",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Amount of Disputers (people who locked BEPRO) in the network",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "getAmountOfDisputers",
      "longname": "Network#getAmountOfDisputers",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000086",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Amount of Needed for Approve\n   * @returns {Promise<number>}\n   */",
      "meta": {
        "range": [
          3228,
          3425
        ],
        "filename": "Network.js",
        "lineno": 119,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100000827",
          "name": "Network#percentageNeededForApprove",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Amount of Needed for Approve",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "percentageNeededForApprove",
      "longname": "Network#percentageNeededForApprove",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000087",
      "___s": true
    },
    {
      "comment": "/**\n   * @description Get Amount of % Needed for Dispute\n   * @returns {Promise<number>}\n   */",
      "meta": {
        "range": [
          3526,
          3723
        ],
        "filename": "Network.js",
        "lineno": 133,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100000852",
          "name": "Network#percentageNeededForDispute",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Amount of % Needed for Dispute",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "percentageNeededForDispute",
      "longname": "Network#percentageNeededForDispute",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000088",
      "___s": true
    },
    {
      "comment": "/**\n   * @description Get Amount of Merge Fee Share\n   * @returns {Promise<number>}\n   */",
      "meta": {
        "range": [
          3819,
          4004
        ],
        "filename": "Network.js",
        "lineno": 147,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100000877",
          "name": "Network#mergeCreatorFeeShare",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Amount of Merge Fee Share",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "mergeCreatorFeeShare",
      "longname": "Network#mergeCreatorFeeShare",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000089",
      "___s": true
    },
    {
      "comment": "/**\n   * @description Get Time of disputableTime\n   * @returns {Promise<Date>}\n   */",
      "meta": {
        "range": [
          4095,
          4298
        ],
        "filename": "Network.js",
        "lineno": 161,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100000902",
          "name": "Network#disputableTime",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Time of disputableTime",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Date>"
            ]
          }
        }
      ],
      "name": "disputableTime",
      "longname": "Network#disputableTime",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000090",
      "___s": true
    },
    {
      "comment": "/**\n   * @description Get Time of redeemTime\n   * @returns {Promise<Date>}\n   */",
      "meta": {
        "range": [
          4385,
          4560
        ],
        "filename": "Network.js",
        "lineno": 175,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100000929",
          "name": "Network#redeemTime",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Time of redeemTime",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Date>"
            ]
          }
        }
      ],
      "name": "redeemTime",
      "longname": "Network#redeemTime",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000091",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Amount of Needed for Merge\n   * @returns {Promise<number>}\n   */",
      "meta": {
        "range": [
          4645,
          4838
        ],
        "filename": "Network.js",
        "lineno": 190,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100000956",
          "name": "Network#percentageNeededForMerge",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Amount of Needed for Merge",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "percentageNeededForMerge",
      "longname": "Network#percentageNeededForMerge",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000092",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Total Amount of Tokens Staked for Bounties in the Network\n   * @returns {Promise<number>}\n   */",
      "meta": {
        "range": [
          4953,
          5109
        ],
        "filename": "Network.js",
        "lineno": 204,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100000981",
          "name": "Network#getTokensStaked",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Total Amount of Tokens Staked for Bounties in the Network",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "getTokensStaked",
      "longname": "Network#getTokensStaked",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000093",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Total Amount of BEPRO Staked for Oracles\n   * @returns {Promise<number>}\n   */",
      "meta": {
        "range": [
          5207,
          5364
        ],
        "filename": "Network.js",
        "lineno": 215,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001008",
          "name": "Network#getBEPROStaked",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Total Amount of BEPRO Staked for Oracles",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "getBEPROStaked",
      "longname": "Network#getBEPROStaked",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000094",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Total Amount of Tokens Staked in the network\n   * @returns {Promise<number>}\n   */",
      "meta": {
        "range": [
          5467,
          5646
        ],
        "filename": "Network.js",
        "lineno": 227,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001035",
          "name": "Network#votesStaked",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Total Amount of Tokens Staked in the network",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "votesStaked",
      "longname": "Network#votesStaked",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000095",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Transaction Token Address\n   * @returns {Promise<address>}\n   */",
      "meta": {
        "range": [
          5730,
          5878
        ],
        "filename": "Network.js",
        "lineno": 241,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001062",
          "name": "Network#getTransactionTokenAddress",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Transaction Token Address",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<address>"
            ]
          }
        }
      ],
      "name": "getTransactionTokenAddress",
      "longname": "Network#getTransactionTokenAddress",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000096",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify if Address is Council\n   * @param {Object} params\n   * @param {number} params.address\n   * @returns {Promise<address>}\n   */",
      "meta": {
        "range": [
          6026,
          6147
        ],
        "filename": "Network.js",
        "lineno": 255,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001084",
          "name": "Network#isCouncil",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Verify if Address is Council",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<address>"
            ]
          }
        }
      ],
      "name": "isCouncil",
      "longname": "Network#isCouncil",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000097",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Settler Token Address\n   * @returns {Promise<address>}\n   */",
      "meta": {
        "range": [
          6227,
          6367
        ],
        "filename": "Network.js",
        "lineno": 263,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001106",
          "name": "Network#getSettlerTokenAddress",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Settler Token Address",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<address>"
            ]
          }
        }
      ],
      "name": "getSettlerTokenAddress",
      "longname": "Network#getSettlerTokenAddress",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000100",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Amount Needed for Council\n   * @returns {Promise<Integer>}\n   */",
      "meta": {
        "range": [
          6452,
          6637
        ],
        "filename": "Network.js",
        "lineno": 275,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001128",
          "name": "Network#COUNCIL_AMOUNT",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Amount Needed for Council",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Integer>"
            ]
          }
        }
      ],
      "name": "COUNCIL_AMOUNT",
      "longname": "Network#COUNCIL_AMOUNT",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000101",
      "___s": true
    },
    {
      "comment": "/**\n   * Change amount needed for Council\n   * @param {number} value\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          6841,
          7075
        ],
        "filename": "Network.js",
        "lineno": 295,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001155",
          "name": "Network#changeCouncilAmount",
          "type": "MethodDefinition",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Change amount needed for Council",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "changeCouncilAmount",
      "longname": "Network#changeCouncilAmount",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000102",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify if Issue is still in Draft Mode (Available to use the redeemIssue Action)\n   * @param {Object} params\n   * @param {number} params.issueId\n   * @returns {Promise<boolean>}\n   */",
      "meta": {
        "range": [
          7274,
          7426
        ],
        "filename": "Network.js",
        "lineno": 307,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001191",
          "name": "Network#isIssueInDraft",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Verify if Issue is still in Draft Mode (Available to use the redeemIssue Action)",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.issueId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<boolean>"
            ]
          }
        }
      ],
      "name": "isIssueInDraft",
      "longname": "Network#isIssueInDraft",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000103",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify if Merge is disputed (i.e. was rejected by the network holders)\n   * @param {Object} params\n   * @param {number} params.issueId\n   * @param {number} params.mergeId\n   * @returns {Promise<boolean>}\n   */",
      "meta": {
        "range": [
          7652,
          7824
        ],
        "filename": "Network.js",
        "lineno": 322,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001217",
          "name": "Network#isMergeDisputed",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Verify if Merge is disputed (i.e. was rejected by the network holders)",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.issueId"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.mergeId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<boolean>"
            ]
          }
        }
      ],
      "name": "isMergeDisputed",
      "longname": "Network#isMergeDisputed",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000105",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Issue Id Info\n   * @param {Object} params\n   * @param {Address} params.address\n   * @returns {Promise<number>} Number of votes\n   */",
      "meta": {
        "range": [
          7976,
          8181
        ],
        "filename": "Network.js",
        "lineno": 335,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001246",
          "name": "Network#getOraclesByAddress",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Issue Id Info",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          },
          "description": "Number of votes"
        }
      ],
      "name": "getOraclesByAddress",
      "longname": "Network#getOraclesByAddress",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000108",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Oralces By Address\n   * @param {Object} params\n   * @param {Address} params.address\n   * @returns {Integer} oraclesDelegatedByOthers\n   * @returns {Array | Integer} amounts\n   * @returns {Array | Address} addresses\n   * @returns {Integer} tokensLocked\n   */",
      "meta": {
        "range": [
          8458,
          8874
        ],
        "filename": "Network.js",
        "lineno": 352,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001281",
          "name": "Network#getOraclesSummary",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Oralces By Address",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "oraclesDelegatedByOthers"
        },
        {
          "type": {
            "names": [
              "Array",
              "Integer"
            ]
          },
          "description": "amounts"
        },
        {
          "type": {
            "names": [
              "Array",
              "Address"
            ]
          },
          "description": "addresses"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "tokensLocked"
        }
      ],
      "name": "getOraclesSummary",
      "longname": "Network#getOraclesSummary",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000111",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Issue By Id\n   * @param {Object} params\n   * @param {String} params.issueCID\n   * @returns {Promise<TokensNetwork~Issue>}\n   */",
      "meta": {
        "range": [
          9022,
          9534
        ],
        "filename": "Network.js",
        "lineno": 373,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001364",
          "name": "Network#getIssueByCID",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Issue By Id",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "name": "params.issueCID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TokensNetwork~Issue>"
            ]
          }
        }
      ],
      "name": "getIssueByCID",
      "longname": "Network#getIssueByCID",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000118",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Issue By Id\n   * @param {Object} params\n   * @param {Integer} params.issueId\n   * @returns {Promise<TokensNetwork~Issue>}\n   */",
      "meta": {
        "range": [
          9681,
          10189
        ],
        "filename": "Network.js",
        "lineno": 398,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001448",
          "name": "Network#getIssueById",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Issue By Id",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "name": "params.issueId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TokensNetwork~Issue>"
            ]
          }
        }
      ],
      "name": "getIssueById",
      "longname": "Network#getIssueById",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000130",
      "___s": true
    },
    {
      "comment": "/**\n   * Get votes, address and amounts for issue\n   * @param {Object} params\n   * @param {number} params.issue_id\n   * @param {number} params.merge_id\n   * @return {Promise<TokensNetwork~MergedIssue>}\n   */",
      "meta": {
        "range": [
          10404,
          10881
        ],
        "filename": "Network.js",
        "lineno": 425,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001532",
          "name": "Network#getMergeById",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get votes, address and amounts for issue",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.issue_id"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.merge_id"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TokensNetwork~MergedIssue>"
            ]
          }
        }
      ],
      "name": "getMergeById",
      "longname": "Network#getMergeById",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000142",
      "___s": true
    },
    {
      "comment": "/**\n   * Approve ERC20 Allowance\n   * @function\n   * @return {Promise<number>}\n   */",
      "meta": {
        "range": [
          10972,
          11226
        ],
        "filename": "Network.js",
        "lineno": 448,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001621",
          "name": "approveSettlerERC20Token",
          "type": "ClassProperty"
        }
      },
      "description": "Approve ERC20 Allowance",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "approveSettlerERC20Token",
      "longname": "Network#approveSettlerERC20Token",
      "memberof": "Network",
      "scope": "instance",
      "___id": "T000002R000152",
      "___s": true
    },
    {
      "comment": "/**\n   * Approve ERC20 Allowance\n   * @function\n   * @return {Promise<number>}\n   */",
      "meta": {
        "range": [
          11317,
          11585
        ],
        "filename": "Network.js",
        "lineno": 461,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001652",
          "name": "approveTransactionalERC20Token",
          "type": "ClassProperty"
        }
      },
      "description": "Approve ERC20 Allowance",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "approveTransactionalERC20Token",
      "longname": "Network#approveTransactionalERC20Token",
      "memberof": "Network",
      "scope": "instance",
      "___id": "T000002R000156",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify if Approved\n   * @function\n   * @param {Object} params\n   * @param {number} params.amount\n   * @param {Address} params.address\n   * @return {Promise<number>}\n   */",
      "meta": {
        "range": [
          11771,
          11946
        ],
        "filename": "Network.js",
        "lineno": 477,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001683",
          "name": "isApprovedSettlerToken",
          "type": "ClassProperty"
        }
      },
      "description": "Verify if Approved",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.amount"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "isApprovedSettlerToken",
      "longname": "Network#isApprovedSettlerToken",
      "memberof": "Network",
      "scope": "instance",
      "___id": "T000002R000160",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify if Approved\n   * @function\n   * @param {Object} params\n   * @param {number} params.amount\n   * @param {Address} params.address\n   * @return {Promise<number>}\n   */",
      "meta": {
        "range": [
          12133,
          12322
        ],
        "filename": "Network.js",
        "lineno": 491,
        "columnno": 3,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001708",
          "name": "isApprovedTransactionalToken",
          "type": "ClassProperty"
        }
      },
      "description": "Verify if Approved",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.amount"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "isApprovedTransactionalToken",
      "longname": "Network#isApprovedTransactionalToken",
      "memberof": "Network",
      "scope": "instance",
      "___id": "T000002R000166",
      "___s": true
    },
    {
      "comment": "/**\n   * lock tokens for oracles\n   * @param {Object} params\n   * @params params.tokenAmount {number}\n   * @throws {Error} Tokens Amount has to be higher than 0\n   * @throws {Error} Tokens not approve for tx, first use 'approveERC20'\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          12612,
          12937
        ],
        "filename": "Network.js",
        "lineno": 505,
        "columnno": 3,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001733",
          "name": "Network#lock",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "lock tokens for oracles",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        }
      ],
      "tags": [
        {
          "originalTitle": "params",
          "title": "params",
          "text": "params.tokenAmount {number}",
          "value": "params.tokenAmount {number}"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Tokens Amount has to be higher than 0"
        },
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Tokens not approve for tx, first use 'approveERC20'"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "lock",
      "longname": "Network#lock",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000172",
      "___s": true
    },
    {
      "comment": "/**\n   * Unlock Tokens for oracles\n   * @param {Object} params\n   * @params params.tokenAmount {number}\n   * @params params.from {address}\n   * @throws {Error} Tokens Amount has to be higher than 0\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          13191,
          13532
        ],
        "filename": "Network.js",
        "lineno": 524,
        "columnno": 3,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001780",
          "name": "Network#unlock",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Unlock Tokens for oracles",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        }
      ],
      "tags": [
        {
          "originalTitle": "params",
          "title": "params",
          "text": "params.tokenAmount {number}",
          "value": "params.tokenAmount {number}"
        },
        {
          "originalTitle": "params",
          "title": "params",
          "text": "params.from {address}",
          "value": "params.from {address}"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Tokens Amount has to be higher than 0"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "unlock",
      "longname": "Network#unlock",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000174",
      "___s": true
    },
    {
      "comment": "/**\n   * Delegated Oracles to others\n   * @param {Object} params\n   * @param {number} params.tokenAmount\n   * @param {Address} params.delegatedTo\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          13734,
          14131
        ],
        "filename": "Network.js",
        "lineno": 541,
        "columnno": 3,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001830",
          "name": "Network#delegateOracles",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delegated Oracles to others",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.tokenAmount"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.delegatedTo"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "delegateOracles",
      "longname": "Network#delegateOracles",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000177",
      "___s": true
    },
    {
      "comment": "/**\n   * Recognize Issue as Resolved\n   * @param {Object} params\n   * @param {Number} params.issueId\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          14288,
          14474
        ],
        "filename": "Network.js",
        "lineno": 559,
        "columnno": 3,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001880",
          "name": "Network#recognizeAsFinished",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Recognize Issue as Resolved",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "name": "params.issueId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "recognizeAsFinished",
      "longname": "Network#recognizeAsFinished",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000180",
      "___s": true
    },
    {
      "comment": "/**\n   * open Issue\n   * @param {Object} params\n   * @param {number} params.tokenAmount\n   * @param {String} params.cid\n   * @throws {Error} Tokens Amount has to be higher than 0\n   * @throws {Error} Tokens not approve for tx, first use 'approveERC20'\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          14782,
          15130
        ],
        "filename": "Network.js",
        "lineno": 576,
        "columnno": 3,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001907",
          "name": "Network#openIssue",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "open Issue",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.tokenAmount"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "name": "params.cid"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Tokens Amount has to be higher than 0"
        },
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Tokens not approve for tx, first use 'approveERC20'"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "openIssue",
      "longname": "Network#openIssue",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000182",
      "___s": true
    },
    {
      "comment": "/**\n   * redeem Issue\n   * @param {Object} params\n   * @param {number} params.issueId\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          15272,
          15422
        ],
        "filename": "Network.js",
        "lineno": 592,
        "columnno": 3,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001957",
          "name": "Network#redeemIssue",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "redeem Issue",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.issueId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "redeemIssue",
      "longname": "Network#redeemIssue",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000185",
      "___s": true
    },
    {
      "comment": "/**\n   * open Issue\n   * @param {Object} params\n   * @param {number} params.issueID\n   * @param {number} params.tokenAmount\n   * @param {address} params.address\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          15640,
          16021
        ],
        "filename": "Network.js",
        "lineno": 607,
        "columnno": 3,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100001984",
          "name": "Network#updateIssue",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "open Issue",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.issueID"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.tokenAmount"
        },
        {
          "type": {
            "names": [
              "address"
            ]
          },
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "updateIssue",
      "longname": "Network#updateIssue",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000187",
      "___s": true
    },
    {
      "comment": "/**\n * Propose Merge of Issue\n * @param {Object} params\n * @param {number} params.issueID\n * @param {Address[]} params.prAddresses\n * @param {number[]} params.prAmounts\n * @return {Promise<TransactionObject>}\n */",
      "meta": {
        "range": [
          16242,
          16750
        ],
        "filename": "Network.js",
        "lineno": 628,
        "columnno": 3,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002034",
          "name": "Network#proposeIssueMerge",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Propose Merge of Issue",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.issueID"
        },
        {
          "type": {
            "names": [
              "Array.<Address>"
            ]
          },
          "name": "params.prAddresses"
        },
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "name": "params.prAmounts"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "proposeIssueMerge",
      "longname": "Network#proposeIssueMerge",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000190",
      "___s": true
    },
    {
      "comment": "/**\n   * close Issue\n   * @param {Object} params\n   * @param {number} params.issueID\n   * @param {number} params.mergeID\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          16927,
          17093
        ],
        "filename": "Network.js",
        "lineno": 648,
        "columnno": 3,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002101",
          "name": "Network#closeIssue",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "close Issue",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.issueID"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.mergeID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "closeIssue",
      "longname": "Network#closeIssue",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000195",
      "___s": true
    },
    {
      "comment": "/**\n   * Dispute Merge\n   * @param {Object} params\n   * @param {number} params.issueID\n   * @param {number} params.mergeID\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          17272,
          17442
        ],
        "filename": "Network.js",
        "lineno": 661,
        "columnno": 3,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002131",
          "name": "Network#disputeMerge",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Dispute Merge",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.issueID"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.mergeID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "disputeMerge",
      "longname": "Network#disputeMerge",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000198",
      "___s": true
    },
    {
      "comment": "/**\n   * Deploys current contract and awaits for {@link TokensNetwork#__assert}\n   * @function\n   * @param {Object} params\n   * @param {string} params.settlerTokenAddress\n   * @param {string} params.transactionTokenAddress\n   * @param {string} params.governanceAddress\n   * @param {function():void} params.callback\n   * @return {Promise<*|undefined>}\n   */",
      "meta": {
        "range": [
          17805,
          18185
        ],
        "filename": "Network.js",
        "lineno": 677,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002161",
          "name": "deploy",
          "type": "ClassProperty"
        }
      },
      "description": "Deploys current contract and awaits for {@link TokensNetwork#__assert}",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "params.settlerTokenAddress"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "params.transactionTokenAddress"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "params.governanceAddress"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "params.callback"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(*|undefined)>"
            ]
          }
        }
      ],
      "name": "deploy",
      "longname": "Network#deploy",
      "memberof": "Network",
      "scope": "instance",
      "___id": "T000002R000201",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @return ERC20Contract|null\n   */",
      "meta": {
        "range": [
          18248,
          18305
        ],
        "filename": "Network.js",
        "lineno": 692,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002208",
          "name": "getSettlerTokenContract",
          "type": "ClassProperty"
        }
      },
      "kind": "function",
      "returns": [
        {
          "description": "ERC20Contract|null"
        }
      ],
      "name": "getSettlerTokenContract",
      "longname": "Network#getSettlerTokenContract",
      "memberof": "Network",
      "scope": "instance",
      "___id": "T000002R000209",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @return ERC20Contract|null\n   */",
      "meta": {
        "range": [
          18369,
          18436
        ],
        "filename": "Network.js",
        "lineno": 699,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002215",
          "name": "getTransactionTokenContract",
          "type": "ClassProperty"
        }
      },
      "kind": "function",
      "returns": [
        {
          "description": "ERC20Contract|null"
        }
      ],
      "name": "getTransactionTokenContract",
      "longname": "Network#getTransactionTokenContract",
      "memberof": "Network",
      "scope": "instance",
      "___id": "T000002R000210",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef {Object} NetworkFactory~Options\n * @property {Boolean} test\n * @property {Boolean} localtest ganache local blockchain\n * @property {Web3Connection} [web3Connection=Web3Connection] created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'\n * @property {string} [contractAddress]\n */",
      "meta": {
        "filename": "NetworkFactory.js",
        "lineno": 9,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {}
      },
      "kind": "typedef",
      "name": "Options",
      "type": {
        "names": [
          "Object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "name": "test"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "ganache local blockchain",
          "name": "localtest"
        },
        {
          "type": {
            "names": [
              "Web3Connection"
            ]
          },
          "optional": true,
          "defaultvalue": "Web3Connection",
          "description": "created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'",
          "name": "web3Connection"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "name": "contractAddress"
        }
      ],
      "memberof": "NetworkFactory",
      "longname": "NetworkFactory~Options",
      "scope": "inner",
      "___id": "T000002R000212",
      "___s": true
    },
    {
      "comment": "/**\n * Network Object\n * @class Network\n * @param {Network~Options} options\n */",
      "meta": {
        "filename": "NetworkFactory.js",
        "lineno": 17,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {}
      },
      "description": "Network Object",
      "kind": "class",
      "name": "Network",
      "params": [
        {
          "type": {
            "names": [
              "Network~Options"
            ]
          },
          "name": "options"
        }
      ],
      "longname": "Network",
      "scope": "global",
      "___id": "T000002R000213",
      "___s": true
    },
    {
      "comment": "/**\n   * Asserts the 2 {@link ERC20Contract} on the current address\n   * @function\n   * @return {Promise<void>}\n   * @throws {Error} Contract is not deployed, first deploy it and provide a contract address\n   */",
      "meta": {
        "range": [
          1015,
          1650
        ],
        "filename": "NetworkFactory.js",
        "lineno": 35,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002259",
          "name": "__assert",
          "type": "ClassProperty"
        }
      },
      "description": "Asserts the 2 {@link ERC20Contract} on the current address",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<void>"
            ]
          }
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Contract is not deployed, first deploy it and provide a contract address"
        }
      ],
      "name": "__assert",
      "longname": "Network#__assert",
      "memberof": "Network",
      "scope": "instance",
      "___id": "T000002R000217",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Network By Creator Address\n   * @param {Address} address\n   * @returns {Adddress}\n   */",
      "meta": {
        "range": [
          1757,
          1915
        ],
        "filename": "NetworkFactory.js",
        "lineno": 62,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002331",
          "name": "Network#getNetworkByAddress",
          "type": "MethodDefinition",
          "paramnames": [
            "address"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Network By Creator Address",
      "params": [
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Adddress"
            ]
          }
        }
      ],
      "name": "getNetworkByAddress",
      "longname": "Network#getNetworkByAddress",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000222",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Network By Id\n   * @param {number} id\n   * @returns {Adddress}\n   */",
      "meta": {
        "range": [
          2003,
          2141
        ],
        "filename": "NetworkFactory.js",
        "lineno": 74,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002355",
          "name": "Network#getNetworkById",
          "type": "MethodDefinition",
          "paramnames": [
            "id"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Network By Id",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "id"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Adddress"
            ]
          }
        }
      ],
      "name": "getNetworkById",
      "longname": "Network#getNetworkById",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000223",
      "___s": true
    },
    {
      "comment": "/**\n     * Get Amount of Networks Forked in the Protocol\n     * @returns {Promise<number>}\n     */",
      "meta": {
        "range": [
          2246,
          2372
        ],
        "filename": "NetworkFactory.js",
        "lineno": 85,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002379",
          "name": "Network#getAmountofNetworksForked",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Amount of Networks Forked in the Protocol",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "getAmountofNetworksForked",
      "longname": "Network#getAmountofNetworksForked",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000224",
      "___s": true
    },
    {
      "comment": "/**\n     * Get Total Amount of Tokens Locked by Operator in the Network\n     * @param {Address} address\n     * @returns {Promise<number>}\n     */",
      "meta": {
        "range": [
          2525,
          2705
        ],
        "filename": "NetworkFactory.js",
        "lineno": 95,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002401",
          "name": "Network#getLockedStakedByAddress",
          "type": "MethodDefinition",
          "paramnames": [
            "address"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Total Amount of Tokens Locked by Operator in the Network",
      "params": [
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "getLockedStakedByAddress",
      "longname": "Network#getLockedStakedByAddress",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000225",
      "___s": true
    },
    {
      "comment": "/**\n     * Get Open Issues Available\n     * @param {Address} address\n     * @returns {Address[]}\n     */",
      "meta": {
        "range": [
          2816,
          2967
        ],
        "filename": "NetworkFactory.js",
        "lineno": 107,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002430",
          "name": "Network#getNetworks",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Open Issues Available",
      "params": [
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<Address>"
            ]
          }
        }
      ],
      "name": "getNetworks",
      "longname": "Network#getNetworks",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000226",
      "___s": true
    },
    {
      "comment": "/**\n     * Get Total Amount of Tokens Staked in the Protocol\n     * @returns {Promise<number>}\n     */",
      "meta": {
        "range": [
          3076,
          3237
        ],
        "filename": "NetworkFactory.js",
        "lineno": 119,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002456",
          "name": "Network#getBEPROLocked",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Total Amount of Tokens Staked in the Protocol",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "getBEPROLocked",
      "longname": "Network#getBEPROLocked",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000228",
      "___s": true
    },
    {
      "comment": "/**\n     * Verify if Address is Council\n     * @param {Object} params\n     * @param {number} params.address\n     * @returns {Promise<address>}\n     */",
      "meta": {
        "range": [
          3394,
          3518
        ],
        "filename": "NetworkFactory.js",
        "lineno": 132,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002483",
          "name": "Network#isOperator",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Verify if Address is Council",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<address>"
            ]
          }
        }
      ],
      "name": "isOperator",
      "longname": "Network#isOperator",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000229",
      "___s": true
    },
    {
      "comment": "/**\n     * Get Settler Token Address\n     * @returns {Promise<address>}\n     */",
      "meta": {
        "range": [
          3604,
          3744
        ],
        "filename": "NetworkFactory.js",
        "lineno": 140,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002503",
          "name": "Network#getSettlerTokenAddress",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Settler Token Address",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<address>"
            ]
          }
        }
      ],
      "name": "getSettlerTokenAddress",
      "longname": "Network#getSettlerTokenAddress",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000231",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Amount Needed for Operator\n   * @returns {Promise<Integer>}\n   */",
      "meta": {
        "range": [
          3829,
          4016
        ],
        "filename": "NetworkFactory.js",
        "lineno": 151,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002525",
          "name": "Network#OPERATOR_AMOUNT",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Amount Needed for Operator",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Integer>"
            ]
          }
        }
      ],
      "name": "OPERATOR_AMOUNT",
      "longname": "Network#OPERATOR_AMOUNT",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000232",
      "___s": true
    },
    {
      "comment": "/**\n   * Approve ERC20 Allowance\n   * @function\n   * @return {Promise<number>}\n   */",
      "meta": {
        "range": [
          4107,
          4361
        ],
        "filename": "NetworkFactory.js",
        "lineno": 166,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002552",
          "name": "approveSettlerERC20Token",
          "type": "ClassProperty"
        }
      },
      "description": "Approve ERC20 Allowance",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "approveSettlerERC20Token",
      "longname": "Network#approveSettlerERC20Token",
      "memberof": "Network",
      "scope": "instance",
      "___id": "T000002R000233",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify if Approved\n   * @function\n   * @param {Object} params\n   * @param {number} params.amount\n   * @param {Address} params.address\n   * @return {Promise<number>}\n   */",
      "meta": {
        "range": [
          4548,
          4723
        ],
        "filename": "NetworkFactory.js",
        "lineno": 183,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002583",
          "name": "isApprovedSettlerToken",
          "type": "ClassProperty"
        }
      },
      "description": "Verify if Approved",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.amount"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "isApprovedSettlerToken",
      "longname": "Network#isApprovedSettlerToken",
      "memberof": "Network",
      "scope": "instance",
      "___id": "T000002R000237",
      "___s": true
    },
    {
      "comment": "/**\n   * lock tokens for operator use\n   * @param {Object} params\n   * @params params.tokenAmount {number}\n   * @throws {Error} Tokens Amount has to be higher than 0\n   * @throws {Error} Tokens not approve for tx, first use 'approveERC20'\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          5016,
          5333
        ],
        "filename": "NetworkFactory.js",
        "lineno": 197,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002608",
          "name": "Network#lock",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "lock tokens for operator use",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        }
      ],
      "tags": [
        {
          "originalTitle": "params",
          "title": "params",
          "text": "params.tokenAmount {number}",
          "value": "params.tokenAmount {number}"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Tokens Amount has to be higher than 0"
        },
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Tokens not approve for tx, first use 'approveERC20'"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "lock",
      "longname": "Network#lock",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000243",
      "___s": true
    },
    {
      "comment": "/**\n   * Unlock Tokens for oracles\n   * @throws {Error} Tokens Amount has to be higher than 0\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          5481,
          5599
        ],
        "filename": "NetworkFactory.js",
        "lineno": 212,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002655",
          "name": "Network#unlock",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Unlock Tokens for oracles",
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Tokens Amount has to be higher than 0"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "unlock",
      "longname": "Network#unlock",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000245",
      "___s": true
    },
    {
      "comment": "/**\n   * Create Network\n   * @param {Object} params\n   * @param {Address} params.settlerToken\n   * @param {Address} params.transactionalToken\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          5795,
          6013
        ],
        "filename": "NetworkFactory.js",
        "lineno": 225,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002678",
          "name": "Network#createNetwork",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create Network",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.settlerToken"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.transactionalToken"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "createNetwork",
      "longname": "Network#createNetwork",
      "kind": "function",
      "memberof": "Network",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000246",
      "___s": true
    },
    {
      "comment": "/**\n   * Deploys Contracts\n   * @function\n   * @param {Object} params\n   * @param {string} params.beproAddress\n   * @param {function():void} params.callback\n   * @return {Promise<*|undefined>}\n   */",
      "meta": {
        "range": [
          6218,
          6496
        ],
        "filename": "NetworkFactory.js",
        "lineno": 241,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002708",
          "name": "deploy",
          "type": "ClassProperty"
        }
      },
      "description": "Deploys Contracts",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "params.beproAddress"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "params.callback"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(*|undefined)>"
            ]
          }
        }
      ],
      "name": "deploy",
      "longname": "Network#deploy",
      "memberof": "Network",
      "scope": "instance",
      "___id": "T000002R000249",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @return ERC20Contract|null\n   */",
      "meta": {
        "range": [
          6559,
          6616
        ],
        "filename": "NetworkFactory.js",
        "lineno": 256,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO",
        "code": {
          "id": "astnode100002749",
          "name": "getSettlerTokenContract",
          "type": "ClassProperty"
        }
      },
      "kind": "function",
      "returns": [
        {
          "description": "ERC20Contract|null"
        }
      ],
      "name": "getSettlerTokenContract",
      "longname": "Network#getSettlerTokenContract",
      "memberof": "Network",
      "scope": "instance",
      "___id": "T000002R000255",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef {Object} ERC20Contract~Options\n * @property {Boolean} test\n * @property {Boolean} localtest ganache local blockchain\n * @property {Web3Connection} [web3Connection=Web3Connection] created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'\n * @property {string} [contractAddress]\n */",
      "meta": {
        "filename": "ERC20Contract.js",
        "lineno": 5,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {}
      },
      "kind": "typedef",
      "name": "Options",
      "type": {
        "names": [
          "Object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "name": "test"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "ganache local blockchain",
          "name": "localtest"
        },
        {
          "type": {
            "names": [
              "Web3Connection"
            ]
          },
          "optional": true,
          "defaultvalue": "Web3Connection",
          "description": "created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'",
          "name": "web3Connection"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "name": "contractAddress"
        }
      ],
      "memberof": "ERC20Contract",
      "longname": "ERC20Contract~Options",
      "scope": "inner",
      "___id": "T000002R000257",
      "___s": true
    },
    {
      "comment": "/**\n * @class ERC20Contract\n * @param {ERC20Contract~Options} options\n */",
      "meta": {
        "filename": "ERC20Contract.js",
        "lineno": 13,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {}
      },
      "kind": "class",
      "name": "ERC20Contract",
      "params": [
        {
          "type": {
            "names": [
              "ERC20Contract~Options"
            ]
          },
          "name": "options"
        }
      ],
      "longname": "ERC20Contract",
      "scope": "global",
      "___id": "T000002R000258",
      "___s": true
    },
    {
      "comment": "/**\n   * Use a {@link ierc20} contract with the current address\n   * @return {Promise<void>}\n   */",
      "meta": {
        "range": [
          750,
          894
        ],
        "filename": "ERC20Contract.js",
        "lineno": 26,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100002791",
          "name": "__assert",
          "type": "ClassProperty"
        }
      },
      "description": "Use a {@link ierc20} contract with the current address",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<void>"
            ]
          }
        }
      ],
      "name": "__assert",
      "longname": "ERC20Contract#__assert",
      "kind": "member",
      "memberof": "ERC20Contract",
      "scope": "instance",
      "___id": "T000002R000262",
      "___s": true
    },
    {
      "comment": "/**\n   *\n   * @return {*}\n   */",
      "meta": {
        "range": [
          932,
          998
        ],
        "filename": "ERC20Contract.js",
        "lineno": 35,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100002820",
          "name": "ERC20Contract#getContract",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          }
        }
      ],
      "name": "getContract",
      "longname": "ERC20Contract#getContract",
      "kind": "function",
      "memberof": "ERC20Contract",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000264",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Token Address\n   * @returns {Address} address\n   */",
      "meta": {
        "range": [
          1069,
          1127
        ],
        "filename": "ERC20Contract.js",
        "lineno": 43,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100002833",
          "name": "ERC20Contract#getAddress",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Token Address",
      "returns": [
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "description": "address"
        }
      ],
      "name": "getAddress",
      "longname": "ERC20Contract#getAddress",
      "kind": "function",
      "memberof": "ERC20Contract",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000265",
      "___s": true
    },
    {
      "comment": "/**\n   * Transfer Tokens\n   * @function\n   * @param {Object} params Parameters\n   * @param {Address} params.toAddress To Address\n   * @param {Integer} params.tokenAmount Amount of Tokens\n   * @returns {Promise<Transaction>} Transaction\n   */",
      "meta": {
        "range": [
          1375,
          1704
        ],
        "filename": "ERC20Contract.js",
        "lineno": 55,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100002843",
          "name": "transferTokenAmount",
          "type": "ClassProperty"
        }
      },
      "description": "Transfer Tokens",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "description": "To Address",
          "name": "params.toAddress"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "Amount of Tokens",
          "name": "params.tokenAmount"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Transaction>"
            ]
          },
          "description": "Transaction"
        }
      ],
      "name": "transferTokenAmount",
      "longname": "ERC20Contract#transferTokenAmount",
      "memberof": "ERC20Contract",
      "scope": "instance",
      "___id": "T000002R000266",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Amount of Tokens User Holds\n   * @function\n   * @param {Address} address User Address\n   * @returns {Promise<Transaction>} Transaction\n   */",
      "meta": {
        "range": [
          1864,
          2012
        ],
        "filename": "ERC20Contract.js",
        "lineno": 73,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100002884",
          "name": "getTokenAmount",
          "type": "ClassProperty"
        }
      },
      "description": "Get Amount of Tokens User Holds",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "description": "User Address",
          "name": "address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Transaction>"
            ]
          },
          "description": "Transaction"
        }
      ],
      "name": "getTokenAmount",
      "longname": "ERC20Contract#getTokenAmount",
      "memberof": "ERC20Contract",
      "scope": "instance",
      "___id": "T000002R000270",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Total Supply of Token\n   * @function\n   * @returns {Promise<number>} Total supply\n   */",
      "meta": {
        "range": [
          2119,
          2254
        ],
        "filename": "ERC20Contract.js",
        "lineno": 83,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100002909",
          "name": "totalSupply",
          "type": "ClassProperty"
        }
      },
      "description": "Get Total Supply of Token",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          },
          "description": "Total supply"
        }
      ],
      "name": "totalSupply",
      "longname": "ERC20Contract#totalSupply",
      "memberof": "ERC20Contract",
      "scope": "instance",
      "___id": "T000002R000271",
      "___s": true
    },
    {
      "comment": "/**\n   *\n   * @return {Contract}\n   */",
      "meta": {
        "range": [
          2299,
          2346
        ],
        "filename": "ERC20Contract.js",
        "lineno": 92,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100002932",
          "name": "ERC20Contract#getABI",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "returns": [
        {
          "type": {
            "names": [
              "Contract"
            ]
          }
        }
      ],
      "name": "getABI",
      "longname": "ERC20Contract#getABI",
      "kind": "function",
      "memberof": "ERC20Contract",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000272",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Decimals of Token\n   * @function\n   * @returns {number} Total supply\n   */",
      "meta": {
        "range": [
          2440,
          2492
        ],
        "filename": "ERC20Contract.js",
        "lineno": 101,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100002942",
          "name": "ERC20Contract#getDecimals",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Decimals of Token",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Total supply"
        }
      ],
      "name": "getDecimals",
      "longname": "ERC20Contract#getDecimals",
      "memberof": "ERC20Contract",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000273",
      "___s": true
    },
    {
      "comment": "/**\n   *\n   * @return {Promise<number>}\n   */",
      "meta": {
        "range": [
          2544,
          2626
        ],
        "filename": "ERC20Contract.js",
        "lineno": 109,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100002952",
          "name": "getDecimalsAsync",
          "type": "ClassProperty"
        }
      },
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "getDecimalsAsync",
      "longname": "ERC20Contract#getDecimalsAsync",
      "kind": "member",
      "memberof": "ERC20Contract",
      "scope": "instance",
      "___id": "T000002R000274",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify if Spender is Approved to use tokens\n   * @function\n   * @param {Object} params Parameters\n   * @param {Address} params.address Sender Address\n   * @param {number} params.amount Amount of Tokens\n   * @param {Address} params.spenderAddress Spender Address\n   * @returns {Promise<boolean>} isApproved\n   */",
      "meta": {
        "range": [
          2953,
          3305
        ],
        "filename": "ERC20Contract.js",
        "lineno": 120,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100002967",
          "name": "isApproved",
          "type": "ClassProperty"
        }
      },
      "description": "Verify if Spender is Approved to use tokens",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "description": "Sender Address",
          "name": "params.address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Amount of Tokens",
          "name": "params.amount"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "description": "Spender Address",
          "name": "params.spenderAddress"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<boolean>"
            ]
          },
          "description": "isApproved"
        }
      ],
      "name": "isApproved",
      "longname": "ERC20Contract#isApproved",
      "memberof": "ERC20Contract",
      "scope": "instance",
      "___id": "T000002R000275",
      "___s": true
    },
    {
      "comment": "/**\n   * Approve tokens to be used by another address/contract\n   * @function\n   * @param {Object} params Parameters\n   * @param {Address} params.address Spender Address/Contract\n   * @param {number} params.amount Amount of Tokens\n   * @param {function():void} params.callback callback for the Tx\n   * @returns {Promise<Transaction>} Transaction\n   */",
      "meta": {
        "range": [
          3663,
          4115
        ],
        "filename": "ERC20Contract.js",
        "lineno": 143,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100003012",
          "name": "approve",
          "type": "ClassProperty"
        }
      },
      "description": "Approve tokens to be used by another address/contract",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "description": "Spender Address/Contract",
          "name": "params.address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Amount of Tokens",
          "name": "params.amount"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "callback for the Tx",
          "name": "params.callback"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Transaction>"
            ]
          },
          "description": "Transaction"
        }
      ],
      "name": "approve",
      "longname": "ERC20Contract#approve",
      "memberof": "ERC20Contract",
      "scope": "instance",
      "___id": "T000002R000280",
      "___s": true
    },
    {
      "comment": "/**\n   * Deploy ERC20 Token\n   * @function\n   * @param {Object} params Parameters\n   * @param {string} params.name Name of token\n   * @param {string} params.symbol Symbol of token\n   * @param {number} params.cap Max supply of Token (ex : 100M)\n   * @param {Address} params.distributionAddress Where tokens should be sent to initially\n   * @returns {Promise<Transaction>} Transaction\n   */",
      "meta": {
        "range": [
          4510,
          5172
        ],
        "filename": "ERC20Contract.js",
        "lineno": 173,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100003067",
          "name": "deploy",
          "type": "ClassProperty"
        }
      },
      "description": "Deploy ERC20 Token",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Name of token",
          "name": "params.name"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Symbol of token",
          "name": "params.symbol"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Max supply of Token (ex : 100M)",
          "name": "params.cap"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "description": "Where tokens should be sent to initially",
          "name": "params.distributionAddress"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Transaction>"
            ]
          },
          "description": "Transaction"
        }
      ],
      "name": "deploy",
      "longname": "ERC20Contract#deploy",
      "memberof": "ERC20Contract",
      "scope": "instance",
      "___id": "T000002R000286",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef {Object} ERC20TokenLock~Options\n * @property {string} tokenAddress\n * @property {Boolean} test\n * @property {Boolean} localtest ganache local blockchain\n * @property {Web3Connection} [web3Connection=Web3Connection] created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'\n * @property {string} [contractAddress]\n */",
      "meta": {
        "filename": "ERC20TokenLock.js",
        "lineno": 9,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {}
      },
      "kind": "typedef",
      "name": "Options",
      "type": {
        "names": [
          "Object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "tokenAddress"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "name": "test"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "ganache local blockchain",
          "name": "localtest"
        },
        {
          "type": {
            "names": [
              "Web3Connection"
            ]
          },
          "optional": true,
          "defaultvalue": "Web3Connection",
          "description": "created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'",
          "name": "web3Connection"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "name": "contractAddress"
        }
      ],
      "memberof": "ERC20TokenLock",
      "longname": "ERC20TokenLock~Options",
      "scope": "inner",
      "___id": "T000002R000297",
      "___s": true
    },
    {
      "comment": "/**\n * ERC20 Token Lock Contract Object\n * @class ERC20TokenLock\n * @param {ERC20TokenLock~Options} options\n */",
      "meta": {
        "filename": "ERC20TokenLock.js",
        "lineno": 18,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {}
      },
      "description": "ERC20 Token Lock Contract Object",
      "kind": "class",
      "name": "ERC20TokenLock",
      "params": [
        {
          "type": {
            "names": [
              "ERC20TokenLock~Options"
            ]
          },
          "name": "options"
        }
      ],
      "longname": "ERC20TokenLock",
      "scope": "global",
      "___id": "T000002R000298",
      "___s": true
    },
    {
      "comment": "/**\n   * Get ERC20 Address of the Token Contract managed\n   * @returns {Promise<Address>}\n   */",
      "meta": {
        "range": [
          1196,
          1291
        ],
        "filename": "ERC20TokenLock.js",
        "lineno": 42,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100003226",
          "name": "ERC20TokenLock#erc20",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get ERC20 Address of the Token Contract managed",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Address>"
            ]
          }
        }
      ],
      "name": "erc20",
      "longname": "ERC20TokenLock#erc20",
      "kind": "function",
      "memberof": "ERC20TokenLock",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000305",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Token Amount of ERC20 Address\n   * @function\n   * @param {Object} params\n   * @param {Address} params.address\n   * @returns {Promise<number>} Token Amount\n   */",
      "meta": {
        "range": [
          1471,
          1565
        ],
        "filename": "ERC20TokenLock.js",
        "lineno": 53,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100003248",
          "name": "getTokenAmount",
          "type": "ClassProperty"
        }
      },
      "description": "Get Token Amount of ERC20 Address",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          },
          "description": "Token Amount"
        }
      ],
      "name": "getTokenAmount",
      "longname": "ERC20TokenLock#getTokenAmount",
      "memberof": "ERC20TokenLock",
      "scope": "instance",
      "___id": "T000002R000306",
      "___s": true
    },
    {
      "comment": "/**\n   * Get All Tokens staked/locked at that specific moment\n   * @returns {Integer} Token Amount\n   */",
      "meta": {
        "range": [
          1676,
          1898
        ],
        "filename": "ERC20TokenLock.js",
        "lineno": 59,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100003262",
          "name": "ERC20TokenLock#totalAmountStaked",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get All Tokens staked/locked at that specific moment",
      "returns": [
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "Token Amount"
        }
      ],
      "name": "totalAmountStaked",
      "longname": "ERC20TokenLock#totalAmountStaked",
      "kind": "function",
      "memberof": "ERC20TokenLock",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000308",
      "___s": true
    },
    {
      "comment": "/**\n   * Get minimum amount of tokens to lock per user\n   * @returns {Promise<number>} Minimum Amount\n   */",
      "meta": {
        "range": [
          2012,
          2230
        ],
        "filename": "ERC20TokenLock.js",
        "lineno": 71,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100003299",
          "name": "ERC20TokenLock#minAmountToLock",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get minimum amount of tokens to lock per user",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          },
          "description": "Minimum Amount"
        }
      ],
      "name": "minAmountToLock",
      "longname": "ERC20TokenLock#minAmountToLock",
      "kind": "function",
      "memberof": "ERC20TokenLock",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000310",
      "___s": true
    },
    {
      "comment": "/**\n   * Get maximum amount of tokens to lock per user\n   * @returns {Promise<number>} Maximum Amount\n   */",
      "meta": {
        "range": [
          2344,
          2562
        ],
        "filename": "ERC20TokenLock.js",
        "lineno": 83,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100003336",
          "name": "ERC20TokenLock#maxAmountToLock",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get maximum amount of tokens to lock per user",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          },
          "description": "Maximum Amount"
        }
      ],
      "name": "maxAmountToLock",
      "longname": "ERC20TokenLock#maxAmountToLock",
      "kind": "function",
      "memberof": "ERC20TokenLock",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000312",
      "___s": true
    },
    {
      "comment": "/**\n   * Check if locked tokens release date has come and user can withdraw them\n   * @function\n   * @param {Object} params\n   * @param {Address} params.address\n   * @returns {Promise<boolean>} canRelease\n   */",
      "meta": {
        "range": [
          2779,
          2891
        ],
        "filename": "ERC20TokenLock.js",
        "lineno": 98,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100003373",
          "name": "canRelease",
          "type": "ClassProperty"
        }
      },
      "description": "Check if locked tokens release date has come and user can withdraw them",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<boolean>"
            ]
          },
          "description": "canRelease"
        }
      ],
      "name": "canRelease",
      "longname": "ERC20TokenLock#canRelease",
      "memberof": "ERC20TokenLock",
      "scope": "instance",
      "___id": "T000002R000314",
      "___s": true
    },
    {
      "comment": "/**\n   * Get locked tokens amount for a given address\n   * @function\n   * @param {Object} params\n   * @param {Address} params.address\n   * @returns {Promise<number>} amount Locked token amount\n   */",
      "meta": {
        "range": [
          3096,
          3339
        ],
        "filename": "ERC20TokenLock.js",
        "lineno": 107,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100003396",
          "name": "getLockedTokens",
          "type": "ClassProperty"
        }
      },
      "description": "Get locked tokens amount for a given address",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          },
          "description": "amount Locked token amount"
        }
      ],
      "name": "getLockedTokens",
      "longname": "ERC20TokenLock#getLockedTokens",
      "memberof": "ERC20TokenLock",
      "scope": "instance",
      "___id": "T000002R000316",
      "___s": true
    },
    {
      "comment": "/**\n   * Get locked tokens info for a given address\n   * @function\n   * @param {Object} params\n   * @param {Address} params.address\n   * @returns {Date} startDate\n   * @returns {Date} endDate\n   * @returns {Promise<number>} amount Token amount\n   */",
      "meta": {
        "range": [
          3595,
          4026
        ],
        "filename": "ERC20TokenLock.js",
        "lineno": 124,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100003436",
          "name": "getLockedTokensInfo",
          "type": "ClassProperty"
        }
      },
      "description": "Get locked tokens info for a given address",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "description": "startDate"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "description": "endDate"
        },
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          },
          "description": "amount Token amount"
        }
      ],
      "name": "getLockedTokensInfo",
      "longname": "ERC20TokenLock#getLockedTokensInfo",
      "memberof": "ERC20TokenLock",
      "scope": "instance",
      "___id": "T000002R000319",
      "___s": true
    },
    {
      "comment": "/**\n   * (Admin only) sets maximum amount of tokens to lock per user\n   * @function\n   * @param {Object} params\n   * @param {Address} params.tokenAmount Amount of Tokens\n   * @returns {Promise<boolean>} Success True if operation was successful\n   */",
      "meta": {
        "range": [
          4282,
          4703
        ],
        "filename": "ERC20TokenLock.js",
        "lineno": 147,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100003496",
          "name": "setMaxAmountToLock",
          "type": "ClassProperty"
        }
      },
      "description": "(Admin only) sets maximum amount of tokens to lock per user",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "description": "Amount of Tokens",
          "name": "params.tokenAmount"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<boolean>"
            ]
          },
          "description": "Success True if operation was successful"
        }
      ],
      "name": "setMaxAmountToLock",
      "longname": "ERC20TokenLock#setMaxAmountToLock",
      "memberof": "ERC20TokenLock",
      "scope": "instance",
      "___id": "T000002R000325",
      "___s": true
    },
    {
      "comment": "/**\n   * (Admin only) sets minimum amount of tokens to lock per user\n   * @function\n   * @param {Object} params\n   * @param {number} params.tokenAmount Minimum tokens amount\n   * @returns {Promise<boolean>} Success True if operation was successful\n   */",
      "meta": {
        "range": [
          4963,
          5384
        ],
        "filename": "ERC20TokenLock.js",
        "lineno": 170,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100003542",
          "name": "setMinAmountToLock",
          "type": "ClassProperty"
        }
      },
      "description": "(Admin only) sets minimum amount of tokens to lock per user",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Minimum tokens amount",
          "name": "params.tokenAmount"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<boolean>"
            ]
          },
          "description": "Success True if operation was successful"
        }
      ],
      "name": "setMinAmountToLock",
      "longname": "ERC20TokenLock#setMinAmountToLock",
      "memberof": "ERC20TokenLock",
      "scope": "instance",
      "___id": "T000002R000328",
      "___s": true
    },
    {
      "comment": "/**\n   * User locks his tokens until specified end date.\n   * REQUIREMENTS:\n   *  user must have approved this contract to spend the tokens \"amount\" he wants to lock before calling this function.\n   * @function\n   * @param {Object} params\n   * @param {Address} params.address User Address\n   * @param {number} params.amount Tokens amount to be locked\n   * @param {Date} params.endDate Lock tokens until this end date\n   * @returns {Promise<boolean>} Success True if operation was successful\n   */",
      "meta": {
        "range": [
          5887,
          7113
        ],
        "filename": "ERC20TokenLock.js",
        "lineno": 197,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100003588",
          "name": "lock",
          "type": "ClassProperty"
        }
      },
      "description": "User locks his tokens until specified end date.\nREQUIREMENTS:\n user must have approved this contract to spend the tokens \"amount\" he wants to lock before calling this function.",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "description": "User Address",
          "name": "params.address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Tokens amount to be locked",
          "name": "params.amount"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "description": "Lock tokens until this end date",
          "name": "params.endDate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<boolean>"
            ]
          },
          "description": "Success True if operation was successful"
        }
      ],
      "name": "lock",
      "longname": "ERC20TokenLock#lock",
      "memberof": "ERC20TokenLock",
      "scope": "instance",
      "___id": "T000002R000331",
      "___s": true
    },
    {
      "comment": "/**\n   * User withdraws his locked tokens after specified end date\n   * @function\n   * @param {Object} params\n   * @param {Address} params.address User Address\n   * @return {Promise<boolean>} Success True if operation was successful\n   */",
      "meta": {
        "range": [
          7358,
          7928
        ],
        "filename": "ERC20TokenLock.js",
        "lineno": 245,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100003717",
          "name": "release",
          "type": "ClassProperty"
        }
      },
      "description": "User withdraws his locked tokens after specified end date",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "description": "User Address",
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<boolean>"
            ]
          },
          "description": "Success True if operation was successful"
        }
      ],
      "name": "release",
      "longname": "ERC20TokenLock#release",
      "memberof": "ERC20TokenLock",
      "scope": "instance",
      "___id": "T000002R000341",
      "___s": true
    },
    {
      "comment": "/**\n   * Approve this contract to transfer tokens of the ERC20 token contract on behalf of user\n   * @function\n   * @return {Promise<boolean>} Success True if operation was successful\n   */",
      "meta": {
        "range": [
          8124,
          8560
        ],
        "filename": "ERC20TokenLock.js",
        "lineno": 270,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100003778",
          "name": "approveERC20Transfer",
          "type": "ClassProperty"
        }
      },
      "description": "Approve this contract to transfer tokens of the ERC20 token contract on behalf of user",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<boolean>"
            ]
          },
          "description": "Success True if operation was successful"
        }
      ],
      "name": "approveERC20Transfer",
      "longname": "ERC20TokenLock#approveERC20Transfer",
      "memberof": "ERC20TokenLock",
      "scope": "instance",
      "___id": "T000002R000348",
      "___s": true
    },
    {
      "comment": "/**\n   *\n   * @return {Promise<void>}\n   * @throws {Error} Contract is not deployed, first deploy it and provide a contract address\n   */",
      "meta": {
        "range": [
          8704,
          9341
        ],
        "filename": "ERC20TokenLock.js",
        "lineno": 287,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100003820",
          "name": "__assert",
          "type": "ClassProperty"
        }
      },
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<void>"
            ]
          }
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Contract is not deployed, first deploy it and provide a contract address"
        }
      ],
      "name": "__assert",
      "longname": "ERC20TokenLock#__assert",
      "kind": "member",
      "memberof": "ERC20TokenLock",
      "scope": "instance",
      "___id": "T000002R000352",
      "___s": true
    },
    {
      "comment": "/**\n   * Deploy the ERC20 Token Lock Contract\n   * @function\n   * @param {Object} params\n   * @param {function():void} params.callback\n   * @return {Promise<*|undefined>}\n   * @throws {Error} No Token Address Provided\n   */",
      "meta": {
        "range": [
          9571,
          9952
        ],
        "filename": "ERC20TokenLock.js",
        "lineno": 317,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100003896",
          "name": "deploy",
          "type": "ClassProperty"
        }
      },
      "description": "Deploy the ERC20 Token Lock Contract",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "params.callback"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(*|undefined)>"
            ]
          }
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "No Token Address Provided"
        }
      ],
      "name": "deploy",
      "longname": "ERC20TokenLock#deploy",
      "memberof": "ERC20TokenLock",
      "scope": "instance",
      "___id": "T000002R000356",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @return ERC20Contract|undefined\n   */",
      "meta": {
        "range": [
          10020,
          10071
        ],
        "filename": "ERC20TokenLock.js",
        "lineno": 334,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20",
        "code": {
          "id": "astnode100003954",
          "name": "getERC20Contract",
          "type": "ClassProperty"
        }
      },
      "kind": "function",
      "returns": [
        {
          "description": "ERC20Contract|undefined"
        }
      ],
      "name": "getERC20Contract",
      "longname": "ERC20TokenLock#getERC20Contract",
      "memberof": "ERC20TokenLock",
      "scope": "instance",
      "___id": "T000002R000361",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef {Object} ERC721Collectibles~Options\n * @property {Boolean} test\n * @property {Boolean} localtest ganache local blockchain\n * @property {Web3Connection} [web3Connection=Web3Connection] created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'\n * @property {string} [contractAddress]\n */",
      "meta": {
        "filename": "ERC721Collectibles.js",
        "lineno": 8,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {}
      },
      "kind": "typedef",
      "name": "Options",
      "type": {
        "names": [
          "Object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "name": "test"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "ganache local blockchain",
          "name": "localtest"
        },
        {
          "type": {
            "names": [
              "Web3Connection"
            ]
          },
          "optional": true,
          "defaultvalue": "Web3Connection",
          "description": "created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'",
          "name": "web3Connection"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "name": "contractAddress"
        }
      ],
      "memberof": "ERC721Collectibles",
      "longname": "ERC721Collectibles~Options",
      "scope": "inner",
      "___id": "T000002R000364",
      "___s": true
    },
    {
      "comment": "/**\n * ERC721Collectibles Object\n * @class ERC721Collectibles\n * @param {ERC721Collectibles~Options} options\n */",
      "meta": {
        "filename": "ERC721Collectibles.js",
        "lineno": 16,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {}
      },
      "description": "ERC721Collectibles Object",
      "kind": "class",
      "name": "ERC721Collectibles",
      "params": [
        {
          "type": {
            "names": [
              "ERC721Collectibles~Options"
            ]
          },
          "name": "options"
        }
      ],
      "longname": "ERC721Collectibles",
      "scope": "global",
      "___id": "T000002R000365",
      "___s": true
    },
    {
      "comment": "/**\n   * Uses {@link erc721collectibles} on the current address and assigns a new {@link ERC20Contract} with\n   * {@link ERC721Collectibles#purchaseToken} as its contract address\n   * @function\n   * @return {Promise<void>}\n   * @throws {Error} Contract is not deployed, first deploy it and provide a contract address\n   */",
      "meta": {
        "range": [
          1169,
          1771
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 33,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004004",
          "name": "__assert",
          "type": "ClassProperty"
        }
      },
      "description": "Uses {@link erc721collectibles} on the current address and assigns a new {@link ERC20Contract} with\n{@link ERC721Collectibles#purchaseToken} as its contract address",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<void>"
            ]
          }
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Contract is not deployed, first deploy it and provide a contract address"
        }
      ],
      "name": "__assert",
      "longname": "ERC721Collectibles#__assert",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "___id": "T000002R000369",
      "___s": true
    },
    {
      "comment": "/**\n   * Get ERC20 Address of the Contract\n   * @returns {Promise<Address>}\n   */",
      "meta": {
        "range": [
          1859,
          1992
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 57,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004072",
          "name": "ERC721Collectibles#purchaseToken",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get ERC20 Address of the Contract",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Address>"
            ]
          }
        }
      ],
      "name": "purchaseToken",
      "longname": "ERC721Collectibles#purchaseToken",
      "kind": "function",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000373",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Price Per Pack\n   * @returns {Promise<number>}\n   */",
      "meta": {
        "range": [
          2064,
          2222
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 68,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004094",
          "name": "ERC721Collectibles#getPricePerPack",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Price Per Pack",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "getPricePerPack",
      "longname": "ERC721Collectibles#getPricePerPack",
      "kind": "function",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000374",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify if token ID exists\n   * @param {Object} params\n   * @param {string} params.tokenID\n   * @returns {Promise<number>} Token Id\n   */",
      "meta": {
        "range": [
          2374,
          2510
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 81,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004121",
          "name": "ERC721Collectibles#exists",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Verify if token ID exists",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "params.tokenID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          },
          "description": "Token Id"
        }
      ],
      "name": "exists",
      "longname": "ERC721Collectibles#exists",
      "kind": "function",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000375",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify if it is limited\n   * @returns {Promise<boolean>}\n   */",
      "meta": {
        "range": [
          2588,
          2692
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 92,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004147",
          "name": "ERC721Collectibles#isLimited",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Verify if it is limited",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<boolean>"
            ]
          }
        }
      ],
      "name": "isLimited",
      "longname": "ERC721Collectibles#isLimited",
      "kind": "function",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000377",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify what is the currentTokenId\n   * @returns {Promise<number>} Current Token Id\n   */",
      "meta": {
        "range": [
          2796,
          2943
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 100,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004169",
          "name": "ERC721Collectibles#currentTokenId",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Verify what is the currentTokenId",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          },
          "description": "Current Token Id"
        }
      ],
      "name": "currentTokenId",
      "longname": "ERC721Collectibles#currentTokenId",
      "kind": "function",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000378",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify what is the getURITokenID\n   * @returns {Promise<string>} URI\n   */",
      "meta": {
        "range": [
          3033,
          3178
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 111,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004194",
          "name": "ERC721Collectibles#getURITokenID",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Verify what is the getURITokenID",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<string>"
            ]
          },
          "description": "URI"
        }
      ],
      "name": "getURITokenID",
      "longname": "ERC721Collectibles#getURITokenID",
      "kind": "function",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000379",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify what is the baseURI\n   * @returns {Promise<string>} URI\n   */",
      "meta": {
        "range": [
          3262,
          3361
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 122,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004220",
          "name": "ERC721Collectibles#baseURI",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Verify what is the baseURI",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<string>"
            ]
          },
          "description": "URI"
        }
      ],
      "name": "baseURI",
      "longname": "ERC721Collectibles#baseURI",
      "kind": "function",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000381",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Ids\n   * @param {Object} params\n   * @param {Address} params.address\n   * @returns {number[]} ids\n   */",
      "meta": {
        "range": [
          3484,
          3688
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 132,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004242",
          "name": "ERC721Collectibles#getRegisteredIDs",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Ids",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "ids"
        }
      ],
      "name": "getRegisteredIDs",
      "longname": "ERC721Collectibles#getRegisteredIDs",
      "kind": "function",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000382",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify if ID is registered\n   * @returns {Promise<boolean>}\n   */",
      "meta": {
        "range": [
          3769,
          3938
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 145,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004281",
          "name": "ERC721Collectibles#isIDRegistered",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Verify if ID is registered",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<boolean>"
            ]
          }
        }
      ],
      "name": "isIDRegistered",
      "longname": "ERC721Collectibles#isIDRegistered",
      "kind": "function",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000385",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify what is the current price per Pack\n   * @returns {Promise<number>} Price per pack in tokens\n   */",
      "meta": {
        "range": [
          4058,
          4213
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 156,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004310",
          "name": "ERC721Collectibles#pricePerPack",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Verify what is the current price per Pack",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          },
          "description": "Price per pack in tokens"
        }
      ],
      "name": "pricePerPack",
      "longname": "ERC721Collectibles#pricePerPack",
      "kind": "function",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000388",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify how much opened packs exist\n   * @returns {Promise<number>} packs\n   */",
      "meta": {
        "range": [
          4307,
          4448
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 167,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004337",
          "name": "ERC721Collectibles#openedPacks",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Verify how much opened packs exist",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          },
          "description": "packs"
        }
      ],
      "name": "openedPacks",
      "longname": "ERC721Collectibles#openedPacks",
      "kind": "function",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000389",
      "___s": true
    },
    {
      "comment": "/**\n   * Approve ERC20 Allowance\n   * @function\n   * @return {Promise<Transaction>}\n   */",
      "meta": {
        "range": [
          4544,
          4772
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 179,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004362",
          "name": "approveERC20",
          "type": "ClassProperty"
        }
      },
      "description": "Approve ERC20 Allowance",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Transaction>"
            ]
          }
        }
      ],
      "name": "approveERC20",
      "longname": "ERC721Collectibles#approveERC20",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "___id": "T000002R000390",
      "___s": true
    },
    {
      "comment": "/**\n   * Set Base Token URI\n   * @function\n   * @param {Object} params\n   * @param {string} params.URI\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          4929,
          5055
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 194,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004393",
          "name": "setBaseTokenURI",
          "type": "ClassProperty"
        }
      },
      "description": "Set Base Token URI",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "params.URI"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "setBaseTokenURI",
      "longname": "ERC721Collectibles#setBaseTokenURI",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "___id": "T000002R000394",
      "___s": true
    },
    {
      "comment": "/**\n   * Approve ERC20 Allowance\n   * @function\n   * @param {Object} params\n   * @param {Address} params.address\n   * @param {number} params.amount\n   * @return {Promise<boolean>}\n   */",
      "meta": {
        "range": [
          5247,
          5403
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 206,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004417",
          "name": "isApproved",
          "type": "ClassProperty"
        }
      },
      "description": "Approve ERC20 Allowance",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.amount"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<boolean>"
            ]
          }
        }
      ],
      "name": "isApproved",
      "longname": "ERC721Collectibles#isApproved",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "___id": "T000002R000396",
      "___s": true
    },
    {
      "comment": "/**\n   * open Pack of tokens\n   * @param {Object} params\n   * @param {number} params.amount Amount of packs to open\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          5573,
          5711
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 218,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004442",
          "name": "ERC721Collectibles#openPack",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "open Pack of tokens",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Amount of packs to open",
          "name": "params.amount"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "openPack",
      "longname": "ERC721Collectibles#openPack",
      "kind": "function",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000402",
      "___s": true
    },
    {
      "comment": "/**\n   * Mint created TokenID\n   * @param {Object} params\n   * @param {number} params.tokenID\n   */",
      "meta": {
        "range": [
          5817,
          5949
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 229,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004469",
          "name": "ERC721Collectibles#mint",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Mint created TokenID",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.tokenID"
        }
      ],
      "name": "mint",
      "longname": "ERC721Collectibles#mint",
      "kind": "function",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000404",
      "___s": true
    },
    {
      "comment": "/**\n   * set Purchase Token Address\n   * @param {Object} params\n   * @param {Address} params.purchaseToken\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          6110,
          6310
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 241,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004496",
          "name": "ERC721Collectibles#setPurchaseTokenAddress",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "set Purchase Token Address",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.purchaseToken"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "setPurchaseTokenAddress",
      "longname": "ERC721Collectibles#setPurchaseTokenAddress",
      "kind": "function",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000406",
      "___s": true
    },
    {
      "comment": "/**\n   * Set Stake Address\n   * @param {Object} params\n   * @param {Address} params.purchaseToken\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          6462,
          6628
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 255,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004523",
          "name": "ERC721Collectibles#setStakeAddress",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Set Stake Address",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.purchaseToken"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "setStakeAddress",
      "longname": "ERC721Collectibles#setStakeAddress",
      "kind": "function",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000408",
      "___s": true
    },
    {
      "comment": "/**\n   * Set Fee Address\n   * @param {Object} params\n   * @param {Address} params.purchaseToken\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          6778,
          6968
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 267,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004550",
          "name": "ERC721Collectibles#setSwapBackAddress",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Set Fee Address",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.purchaseToken"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "setSwapBackAddress",
      "longname": "ERC721Collectibles#setSwapBackAddress",
      "kind": "function",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000410",
      "___s": true
    },
    {
      "comment": "/**\n   * Set Fee Address\n   * @param {Object} params\n   * @param {Address} params.purchaseToken\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          7118,
          7280
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 281,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004577",
          "name": "ERC721Collectibles#setFeeAddress",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Set Fee Address",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.purchaseToken"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "setFeeAddress",
      "longname": "ERC721Collectibles#setFeeAddress",
      "kind": "function",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000412",
      "___s": true
    },
    {
      "comment": "/**\n   * Set Price per Pack\n   * @param {Object} amount\n   * @param {number} amount.newPrice\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          7427,
          7693
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 293,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004604",
          "name": "ERC721Collectibles#setPricePerPack",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Set Price per Pack",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "amount"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "amount.newPrice"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "setPricePerPack",
      "longname": "ERC721Collectibles#setPricePerPack",
      "kind": "function",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000414",
      "___s": true
    },
    {
      "comment": "/**\n   * @link ERC721Collectibles.__deploy\n   * @function\n   * @param {Object} params\n   * @param {*} params.name\n   * @param {*} params.symbol\n   * @param {number} params.limitedAmount\n   * @param {*} params.erc20Purchase\n   * @param {string} params.feeAddress\n   * @param {string} params.otherAddress\n   * @param {*} params.callback\n   * @return {Promise<*|undefined>}\n   * @throws {Error} Please provide an erc20 address for purchases\n   * @throws {Error} Please provide a name\n   * @throws {Error} Please provide a symbol\n   */",
      "meta": {
        "range": [
          8231,
          9060
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 318,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004640",
          "name": "deploy",
          "type": "ClassProperty"
        }
      },
      "tags": [
        {
          "originalTitle": "link",
          "title": "link",
          "text": "ERC721Collectibles.__deploy",
          "value": "ERC721Collectibles.__deploy"
        }
      ],
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "params.name"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "params.symbol"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.limitedAmount"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "params.erc20Purchase"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "params.feeAddress"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "params.otherAddress"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "params.callback"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(*|undefined)>"
            ]
          }
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Please provide an erc20 address for purchases"
        },
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Please provide a name"
        },
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Please provide a symbol"
        }
      ],
      "name": "deploy",
      "longname": "ERC721Collectibles#deploy",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "___id": "T000002R000417",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @return ERC20Contract|undefined\n   */",
      "meta": {
        "range": [
          9128,
          9179
        ],
        "filename": "ERC721Collectibles.js",
        "lineno": 358,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004727",
          "name": "getERC20Contract",
          "type": "ClassProperty"
        }
      },
      "kind": "function",
      "returns": [
        {
          "description": "ERC20Contract|undefined"
        }
      ],
      "name": "getERC20Contract",
      "longname": "ERC721Collectibles#getERC20Contract",
      "memberof": "ERC721Collectibles",
      "scope": "instance",
      "___id": "T000002R000428",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef {Object} ERC721Standard~Options\n * @property {Boolean} test\n * @property {Boolean} localtest ganache local blockchain\n * @property {Web3Connection} [web3Connection=Web3Connection] created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'\n * @property {string} [contractAddress]\n */",
      "meta": {
        "filename": "ERC721Standard.js",
        "lineno": 5,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {}
      },
      "kind": "typedef",
      "name": "Options",
      "type": {
        "names": [
          "Object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "name": "test"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "ganache local blockchain",
          "name": "localtest"
        },
        {
          "type": {
            "names": [
              "Web3Connection"
            ]
          },
          "optional": true,
          "defaultvalue": "Web3Connection",
          "description": "created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'",
          "name": "web3Connection"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "name": "contractAddress"
        }
      ],
      "memberof": "ERC721Standard",
      "longname": "ERC721Standard~Options",
      "scope": "inner",
      "___id": "T000002R000430",
      "___s": true
    },
    {
      "comment": "/**\n * ERC721Standard Object\n * @class ERC721Standard\n * @param {ERC721Standard~Options} options\n */",
      "meta": {
        "filename": "ERC721Standard.js",
        "lineno": 13,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {}
      },
      "description": "ERC721Standard Object",
      "kind": "class",
      "name": "ERC721Standard",
      "params": [
        {
          "type": {
            "names": [
              "ERC721Standard~Options"
            ]
          },
          "name": "options"
        }
      ],
      "longname": "ERC721Standard",
      "scope": "global",
      "___id": "T000002R000431",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @return {Promise<void>}\n   * @throws {Error} Contract is not deployed, first deploy it and provide a contract address\n   */",
      "meta": {
        "range": [
          853,
          1455
        ],
        "filename": "ERC721Standard.js",
        "lineno": 28,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004769",
          "name": "__assert",
          "type": "ClassProperty"
        }
      },
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<void>"
            ]
          }
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Contract is not deployed, first deploy it and provide a contract address"
        }
      ],
      "name": "__assert",
      "longname": "ERC721Standard#__assert",
      "memberof": "ERC721Standard",
      "scope": "instance",
      "___id": "T000002R000435",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify if token ID exists\n   * @param {Object} params\n   * @param {number} params.tokenID\n   * @returns {Promise<boolean>} Token Id\n   */",
      "meta": {
        "range": [
          1608,
          1744
        ],
        "filename": "ERC721Standard.js",
        "lineno": 54,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004837",
          "name": "ERC721Standard#exists",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Verify if token ID exists",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.tokenID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<boolean>"
            ]
          },
          "description": "Token Id"
        }
      ],
      "name": "exists",
      "longname": "ERC721Standard#exists",
      "kind": "function",
      "memberof": "ERC721Standard",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000439",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify what is the getURITokenID\n   * @param {Object} params\n   * @param {number} params.tokenID\n   * @returns {Promise<string>} URI\n   */",
      "meta": {
        "range": [
          1898,
          2043
        ],
        "filename": "ERC721Standard.js",
        "lineno": 67,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004863",
          "name": "ERC721Standard#getURITokenID",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Verify what is the getURITokenID",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.tokenID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<string>"
            ]
          },
          "description": "URI"
        }
      ],
      "name": "getURITokenID",
      "longname": "ERC721Standard#getURITokenID",
      "kind": "function",
      "memberof": "ERC721Standard",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000441",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify what is the baseURI\n   * @returns {Promise<string>} URI\n   */",
      "meta": {
        "range": [
          2127,
          2226
        ],
        "filename": "ERC721Standard.js",
        "lineno": 78,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004889",
          "name": "ERC721Standard#baseURI",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Verify what is the baseURI",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<string>"
            ]
          },
          "description": "URI"
        }
      ],
      "name": "baseURI",
      "longname": "ERC721Standard#baseURI",
      "kind": "function",
      "memberof": "ERC721Standard",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000443",
      "___s": true
    },
    {
      "comment": "/**\n   * Set Base Token URI\n   * @function\n   * @param {Object} params\n   * @param {string} params.URI\n   * @return {Promise<*>}\n   */",
      "meta": {
        "range": [
          2367,
          2493
        ],
        "filename": "ERC721Standard.js",
        "lineno": 89,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004911",
          "name": "setBaseTokenURI",
          "type": "ClassProperty"
        }
      },
      "description": "Set Base Token URI",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "params.URI"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<*>"
            ]
          }
        }
      ],
      "name": "setBaseTokenURI",
      "longname": "ERC721Standard#setBaseTokenURI",
      "memberof": "ERC721Standard",
      "scope": "instance",
      "___id": "T000002R000444",
      "___s": true
    },
    {
      "comment": "/**\n   * Set Token URI\n   * @function\n   * @param {Object} params\n   * @param {string} params.tokenID\n   * @param {string} params.URI\n   * @return {Promise<*>}\n   */",
      "meta": {
        "range": [
          2665,
          2806
        ],
        "filename": "ERC721Standard.js",
        "lineno": 101,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004935",
          "name": "setTokenURI",
          "type": "ClassProperty"
        }
      },
      "description": "Set Token URI",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "params.tokenID"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "params.URI"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<*>"
            ]
          }
        }
      ],
      "name": "setTokenURI",
      "longname": "ERC721Standard#setTokenURI",
      "memberof": "ERC721Standard",
      "scope": "instance",
      "___id": "T000002R000446",
      "___s": true
    },
    {
      "comment": "/**\n   * Mint created TokenID\n   * @param {Object} params\n   * @param {number} params.tokenID\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          2954,
          3086
        ],
        "filename": "ERC721Standard.js",
        "lineno": 111,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004962",
          "name": "ERC721Standard#mint",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Mint created TokenID",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.tokenID"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "mint",
      "longname": "ERC721Standard#mint",
      "kind": "function",
      "memberof": "ERC721Standard",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000449",
      "___s": true
    },
    {
      "comment": "/**\n   * @link ERC721Standard.__deploy\n   * @param {Object} params\n   * @param {string} params.name\n   * @param {*} params.symbol\n   * @param {function():void} params.callback\n   * @return {Promise<*|undefined>}\n   * @throws {Error} Please provide a name\n   * @throws {Error} Please provide a symbol\n   */",
      "meta": {
        "range": [
          3398,
          3816
        ],
        "filename": "ERC721Standard.js",
        "lineno": 127,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100004989",
          "name": "deploy",
          "type": "ClassProperty"
        }
      },
      "tags": [
        {
          "originalTitle": "link",
          "title": "link",
          "text": "ERC721Standard.__deploy",
          "value": "ERC721Standard.__deploy"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "params.name"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "params.symbol"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "params.callback"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(*|undefined)>"
            ]
          }
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Please provide a name"
        },
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Please provide a symbol"
        }
      ],
      "name": "deploy",
      "longname": "ERC721Standard#deploy",
      "kind": "member",
      "memberof": "ERC721Standard",
      "scope": "instance",
      "___id": "T000002R000451",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @return ERC20Contract|undefined\n   */",
      "meta": {
        "range": [
          3884,
          3935
        ],
        "filename": "ERC721Standard.js",
        "lineno": 147,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721",
        "code": {
          "id": "astnode100005049",
          "name": "getERC20Contract",
          "type": "ClassProperty"
        }
      },
      "kind": "function",
      "returns": [
        {
          "description": "ERC20Contract|undefined"
        }
      ],
      "name": "getERC20Contract",
      "longname": "ERC721Standard#getERC20Contract",
      "memberof": "ERC721Standard",
      "scope": "instance",
      "___id": "T000002R000458",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef {Object} IContract~Options\n * @property {boolean} test\n * @property {boolean} localtest ganache local blockchain\n * @property {ABI} abi\n * @property {string} tokenAddress\n * @property {Web3Connection} [web3Connection=Web3Connection] created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'\n * @property {string} [contractAddress]\n * @property {number} [useLastBlockGasPriceWhenMetaSend]\n */",
      "meta": {
        "filename": "IContract.js",
        "lineno": 4,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {}
      },
      "kind": "typedef",
      "name": "Options",
      "type": {
        "names": [
          "Object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "name": "test"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "ganache local blockchain",
          "name": "localtest"
        },
        {
          "type": {
            "names": [
              "ABI"
            ]
          },
          "name": "abi"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "tokenAddress"
        },
        {
          "type": {
            "names": [
              "Web3Connection"
            ]
          },
          "optional": true,
          "defaultvalue": "Web3Connection",
          "description": "created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'",
          "name": "web3Connection"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "name": "contractAddress"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "name": "useLastBlockGasPriceWhenMetaSend"
        }
      ],
      "memberof": "IContract",
      "longname": "IContract~Options",
      "scope": "inner",
      "___id": "T000002R000460",
      "___s": true
    },
    {
      "comment": "/**\n * Contract Object Interface\n * @class IContract\n * @param {IContract~Options} options\n */",
      "meta": {
        "filename": "IContract.js",
        "lineno": 15,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {}
      },
      "description": "Contract Object Interface",
      "kind": "class",
      "name": "IContract",
      "params": [
        {
          "type": {
            "names": [
              "IContract~Options"
            ]
          },
          "name": "options"
        }
      ],
      "longname": "IContract",
      "scope": "global",
      "___id": "T000002R000461",
      "___s": true
    },
    {
      "comment": "/**\n   * Initialize by awaiting {@link IContract.__assert}\n   * @function\n   * @return {Promise<void>}\n   * @throws {Error} if no {@link IContract.getAddress}, Please add a Contract Address\n   */",
      "meta": {
        "range": [
          1721,
          1931
        ],
        "filename": "IContract.js",
        "lineno": 60,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005166",
          "name": "__init__",
          "type": "ClassProperty"
        }
      },
      "description": "Initialize by awaiting {@link IContract.__assert}",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<void>"
            ]
          }
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "if no {@link IContract.getAddress}, Please add a Contract Address"
        }
      ],
      "name": "__init__",
      "longname": "IContract#__init__",
      "memberof": "IContract",
      "scope": "instance",
      "___id": "T000002R000476",
      "___s": true
    },
    {
      "comment": "/**\n   *\n   * @type {number}\n   * @private\n   */",
      "meta": {
        "range": [
          1986,
          2006
        ],
        "filename": "IContract.js",
        "lineno": 77,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005191",
          "name": "_customGasPrice",
          "type": "ClassProperty"
        }
      },
      "type": {
        "names": [
          "number"
        ]
      },
      "access": "private",
      "name": "_customGasPrice",
      "longname": "IContract#_customGasPrice",
      "kind": "member",
      "memberof": "IContract",
      "scope": "instance",
      "___id": "T000002R000477",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @params [Object] params\n   * @params {*} params.f\n   * @params {*} params.acc\n   * @params {*} params.value\n   * @params {function():void} params.callback\n   * @return {Promise<*>}\n   */",
      "meta": {
        "range": [
          2223,
          2732
        ],
        "filename": "IContract.js",
        "lineno": 88,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005193",
          "name": "__metamaskCall",
          "type": "ClassProperty"
        }
      },
      "kind": "function",
      "tags": [
        {
          "originalTitle": "params",
          "title": "params",
          "text": "[Object] params",
          "value": "[Object] params"
        },
        {
          "originalTitle": "params",
          "title": "params",
          "text": "{*} params.f",
          "value": "{*} params.f"
        },
        {
          "originalTitle": "params",
          "title": "params",
          "text": "{*} params.acc",
          "value": "{*} params.acc"
        },
        {
          "originalTitle": "params",
          "title": "params",
          "text": "{*} params.value",
          "value": "{*} params.value"
        },
        {
          "originalTitle": "params",
          "title": "params",
          "text": "{function():void} params.callback",
          "value": "{function():void} params.callback"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<*>"
            ]
          }
        }
      ],
      "name": "__metamaskCall",
      "longname": "IContract#__metamaskCall",
      "memberof": "IContract",
      "scope": "instance",
      "___id": "T000002R000478",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @params {*} f\n   * @params {boolean} call\n   * @params {*} value\n   * @params [function():void] callback\n   * @return {Promise<*>}\n   */",
      "meta": {
        "range": [
          2899,
          3769
        ],
        "filename": "IContract.js",
        "lineno": 116,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005269",
          "name": "__sendTx",
          "type": "ClassProperty"
        }
      },
      "kind": "function",
      "tags": [
        {
          "originalTitle": "params",
          "title": "params",
          "text": "{*} f",
          "value": "{*} f"
        },
        {
          "originalTitle": "params",
          "title": "params",
          "text": "{boolean} call",
          "value": "{boolean} call"
        },
        {
          "originalTitle": "params",
          "title": "params",
          "text": "{*} value",
          "value": "{*} value"
        },
        {
          "originalTitle": "params",
          "title": "params",
          "text": "[function():void] callback",
          "value": "[function():void] callback"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<*>"
            ]
          }
        }
      ],
      "name": "__sendTx",
      "longname": "IContract#__sendTx",
      "memberof": "IContract",
      "scope": "instance",
      "___id": "T000002R000487",
      "___s": true
    },
    {
      "comment": "/**\n   * Deploy current contract\n   * @function\n   * @param {*} params\n   * @param {function()} callback\n   * @return {Promise<*|undefined>}\n   */",
      "meta": {
        "range": [
          3922,
          4120
        ],
        "filename": "IContract.js",
        "lineno": 156,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005424",
          "name": "__deploy",
          "type": "ClassProperty"
        }
      },
      "description": "Deploy current contract",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "callback"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(*|undefined)>"
            ]
          }
        }
      ],
      "name": "__deploy",
      "longname": "IContract#__deploy",
      "memberof": "IContract",
      "scope": "instance",
      "___id": "T000002R000500",
      "___s": true
    },
    {
      "comment": "/**\n   * Asserts and uses {@link IContract.params.contract} with {@link IContract.params.abi}\n   * @function\n   * @void\n   * @throws {Error} Contract is not deployed, first deploy it and provide a contract address\n   */",
      "meta": {
        "range": [
          4346,
          4611
        ],
        "filename": "IContract.js",
        "lineno": 170,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005460",
          "name": "__assert",
          "type": "ClassProperty"
        }
      },
      "description": "Asserts and uses {@link IContract.params.contract} with {@link IContract.params.abi}",
      "kind": "function",
      "tags": [
        {
          "originalTitle": "void",
          "title": "void",
          "text": ""
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Contract is not deployed, first deploy it and provide a contract address"
        }
      ],
      "name": "__assert",
      "longname": "IContract#__assert",
      "memberof": "IContract",
      "scope": "instance",
      "___id": "T000002R000501",
      "___s": true
    },
    {
      "comment": "/**\n   * Deploy {@link IContract.params.contract} and call {@link IContract.__assert}\n   * @function\n   * @param {Object} params\n   * @param {function():void} callback\n   * @return {Promise<*|undefined>}\n   */",
      "meta": {
        "range": [
          4827,
          5072
        ],
        "filename": "IContract.js",
        "lineno": 187,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005492",
          "name": "deploy",
          "type": "ClassProperty"
        }
      },
      "description": "Deploy {@link IContract.params.contract} and call {@link IContract.__assert}",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "callback"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(*|undefined)>"
            ]
          }
        }
      ],
      "name": "deploy",
      "longname": "IContract#deploy",
      "memberof": "IContract",
      "scope": "instance",
      "___id": "T000002R000502",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @description Get Web3 Contract to interact directly with the web3 library functions like events (https://web3js.readthedocs.io/en/v1.2.11/web3-eth-contract.html?highlight=events#contract-events)\n   */",
      "meta": {
        "range": [
          5303,
          5373
        ],
        "filename": "IContract.js",
        "lineno": 200,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005530",
          "name": "IContract#getWeb3Contract",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "kind": "function",
      "description": "Get Web3 Contract to interact directly with the web3 library functions like events (https://web3js.readthedocs.io/en/v1.2.11/web3-eth-contract.html?highlight=events#contract-events)",
      "name": "getWeb3Contract",
      "longname": "IContract#getWeb3Contract",
      "memberof": "IContract",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000507",
      "___s": true
    },
    {
      "comment": "/**\n   * Set new owner of {@link IContract.params.contract}\n   * @param {Object} params\n   * @param {Address} params.address\n   * @return {Promise<*|undefined>}\n   */",
      "meta": {
        "range": [
          5546,
          5698
        ],
        "filename": "IContract.js",
        "lineno": 210,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005543",
          "name": "IContract#setNewOwner",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Set new owner of {@link IContract.params.contract}",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(*|undefined)>"
            ]
          }
        }
      ],
      "name": "setNewOwner",
      "longname": "IContract#setNewOwner",
      "kind": "function",
      "memberof": "IContract",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000508",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Owner of {@link IContract.params.contract}\n   * @returns {Promise<string>}\n   */",
      "meta": {
        "range": [
          5798,
          5893
        ],
        "filename": "IContract.js",
        "lineno": 220,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005570",
          "name": "IContract#owner",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get Owner of {@link IContract.params.contract}",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<string>"
            ]
          }
        }
      ],
      "name": "owner",
      "longname": "IContract#owner",
      "kind": "function",
      "memberof": "IContract",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000510",
      "___s": true
    },
    {
      "comment": "/**\n   * Get the paused state of {@link IContract.params.contract}\n   * @returns {Promise<boolean>}\n   */",
      "meta": {
        "range": [
          6005,
          6104
        ],
        "filename": "IContract.js",
        "lineno": 228,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005592",
          "name": "IContract#isPaused",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the paused state of {@link IContract.params.contract}",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<boolean>"
            ]
          }
        }
      ],
      "name": "isPaused",
      "longname": "IContract#isPaused",
      "kind": "function",
      "memberof": "IContract",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000511",
      "___s": true
    },
    {
      "comment": "/**\n   * (Admins only) Pauses the Contract\n   * @return {Promise<*|undefined>}\n   */",
      "meta": {
        "range": [
          6195,
          6319
        ],
        "filename": "IContract.js",
        "lineno": 236,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005614",
          "name": "IContract#pauseContract",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "(Admins only) Pauses the Contract",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(*|undefined)>"
            ]
          }
        }
      ],
      "name": "pauseContract",
      "longname": "IContract#pauseContract",
      "kind": "function",
      "memberof": "IContract",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000512",
      "___s": true
    },
    {
      "comment": "/**\n   * (Admins only) Unpause Contract\n   * @return {Promise<*|undefined>}\n   */",
      "meta": {
        "range": [
          6407,
          6535
        ],
        "filename": "IContract.js",
        "lineno": 246,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005637",
          "name": "IContract#unpauseContract",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "(Admins only) Unpause Contract",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(*|undefined)>"
            ]
          }
        }
      ],
      "name": "unpauseContract",
      "longname": "IContract#unpauseContract",
      "kind": "function",
      "memberof": "IContract",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000513",
      "___s": true
    },
    {
      "comment": "/**\n   * Remove Tokens from other ERC20 Address (in case of accident)\n   * @param {Object} params\n   * @param {Address} params.tokenAddress\n   * @param {Address} params.toAddress\n   */",
      "meta": {
        "range": [
          6726,
          6944
        ],
        "filename": "IContract.js",
        "lineno": 258,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005660",
          "name": "IContract#removeOtherERC20Tokens",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove Tokens from other ERC20 Address (in case of accident)",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.tokenAddress"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.toAddress"
        }
      ],
      "name": "removeOtherERC20Tokens",
      "longname": "IContract#removeOtherERC20Tokens",
      "kind": "function",
      "memberof": "IContract",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000514",
      "___s": true
    },
    {
      "comment": "/**\n   * (Admins only) Safeguards all tokens from {@link IContract.params.contract}\n   * @param {Object} params\n   * @param {Address} params.toAddress\n   * @return {Promise<*|undefined>}\n   */",
      "meta": {
        "range": [
          7143,
          7307
        ],
        "filename": "IContract.js",
        "lineno": 272,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005690",
          "name": "IContract#safeGuardAllTokens",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "(Admins only) Safeguards all tokens from {@link IContract.params.contract}",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.toAddress"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(*|undefined)>"
            ]
          }
        }
      ],
      "name": "safeGuardAllTokens",
      "longname": "IContract#safeGuardAllTokens",
      "kind": "function",
      "memberof": "IContract",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000517",
      "___s": true
    },
    {
      "comment": "/**\n   * Change token address of {@link IContract.params.contract}\n   * @param {Object} params\n   * @param {Address} params.newTokenAddress\n   * @return {Promise<*|undefined>}\n   */",
      "meta": {
        "range": [
          7495,
          7689
        ],
        "filename": "IContract.js",
        "lineno": 284,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005717",
          "name": "IContract#changeTokenAddress",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Change token address of {@link IContract.params.contract}",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.newTokenAddress"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(*|undefined)>"
            ]
          }
        }
      ],
      "name": "changeTokenAddress",
      "longname": "IContract#changeTokenAddress",
      "kind": "function",
      "memberof": "IContract",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000519",
      "___s": true
    },
    {
      "comment": "/**\n   * Returns the contract address\n   * @returns {string|null} Contract address\n   */",
      "meta": {
        "range": [
          7784,
          7842
        ],
        "filename": "IContract.js",
        "lineno": 296,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005744",
          "name": "IContract#getAddress",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns the contract address",
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "null"
            ]
          },
          "description": "Contract address"
        }
      ],
      "name": "getAddress",
      "longname": "IContract#getAddress",
      "kind": "function",
      "memberof": "IContract",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000521",
      "___s": true
    },
    {
      "comment": "/**\n   * Get the Ether balance for the current {@link IContract#getAddress} using `fromWei` util of {@link IContract#web3}\n   * @returns {Promise<string>}\n   */",
      "meta": {
        "range": [
          8009,
          8150
        ],
        "filename": "IContract.js",
        "lineno": 304,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005754",
          "name": "IContract#getBalance",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the Ether balance for the current {@link IContract#getAddress} using `fromWei` util of {@link IContract#web3}",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<string>"
            ]
          }
        }
      ],
      "name": "getBalance",
      "longname": "IContract#getBalance",
      "kind": "function",
      "memberof": "IContract",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000522",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify that current user/sender is admin, throws an error otherwise\n   * @async\n   * @throws {Error} Only admin can perform this operation\n   * @void\n   */",
      "meta": {
        "range": [
          8321,
          8620
        ],
        "filename": "IContract.js",
        "lineno": 315,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005785",
          "name": "IContract#onlyOwner",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Verify that current user/sender is admin, throws an error otherwise",
      "async": true,
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Only admin can perform this operation"
        }
      ],
      "tags": [
        {
          "originalTitle": "void",
          "title": "void",
          "text": ""
        }
      ],
      "name": "onlyOwner",
      "longname": "IContract#onlyOwner",
      "kind": "function",
      "memberof": "IContract",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000524",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify that contract is not paused before sending a transaction, throws an error otherwise\n   * @async\n   * @throws {Error} Contract is paused\n   * @void\n   */",
      "meta": {
        "range": [
          8795,
          8978
        ],
        "filename": "IContract.js",
        "lineno": 331,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005819",
          "name": "IContract#whenNotPaused",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Verify that contract is not paused before sending a transaction, throws an error otherwise",
      "async": true,
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Contract is paused"
        }
      ],
      "tags": [
        {
          "originalTitle": "void",
          "title": "void",
          "text": ""
        }
      ],
      "name": "whenNotPaused",
      "longname": "IContract#whenNotPaused",
      "kind": "function",
      "memberof": "IContract",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000528",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @description Load data from Web3Connection object,\n   * Called at start when testing or at login on MAINNET\n   */",
      "meta": {
        "range": [
          9122,
          9489
        ],
        "filename": "IContract.js",
        "lineno": 344,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005838",
          "name": "IContract#_loadDataFromWeb3Connection",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "kind": "function",
      "description": "Load data from Web3Connection object,\nCalled at start when testing or at login on MAINNET",
      "name": "_loadDataFromWeb3Connection",
      "longname": "IContract#_loadDataFromWeb3Connection",
      "memberof": "IContract",
      "scope": "instance",
      "params": [],
      "___id": "T000002R000530",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @description Start the Web3Connection\n   */",
      "meta": {
        "range": [
          9628,
          9720
        ],
        "filename": "IContract.js",
        "lineno": 368,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005892",
          "name": "IContract#start",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "kind": "function",
      "description": "Start the Web3Connection",
      "name": "start",
      "longname": "IContract#start",
      "memberof": "IContract",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000536",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @description Login with Metamask/Web3 Wallet - substitutes start()\n   * @return {Promise<Boolean>} True is login was successful\n   */",
      "meta": {
        "range": [
          9884,
          10031
        ],
        "filename": "IContract.js",
        "lineno": 378,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005908",
          "name": "IContract#login",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "kind": "function",
      "description": "Login with Metamask/Web3 Wallet - substitutes start()",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Boolean>"
            ]
          },
          "description": "True is login was successful"
        }
      ],
      "name": "login",
      "longname": "IContract#login",
      "memberof": "IContract",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000537",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @description Get ETH Network\n   * @return {Promise<string>} Network Name (Ex : Kovan)\n   */",
      "meta": {
        "range": [
          10153,
          10234
        ],
        "filename": "IContract.js",
        "lineno": 389,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005931",
          "name": "IContract#getETHNetwork",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "kind": "function",
      "description": "Get ETH Network",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<string>"
            ]
          },
          "description": "Network Name (Ex : Kovan)"
        }
      ],
      "name": "getETHNetwork",
      "longname": "IContract#getETHNetwork",
      "memberof": "IContract",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000539",
      "___s": true
    },
    {
      "comment": "/**\n   * Get contract current user/sender address\n   * @return {Promise<string>|string}\n   */",
      "meta": {
        "range": [
          10334,
          10413
        ],
        "filename": "IContract.js",
        "lineno": 397,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005943",
          "name": "IContract#getUserAddress",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get contract current user/sender address",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<string>",
              "string"
            ]
          }
        }
      ],
      "name": "getUserAddress",
      "longname": "IContract#getUserAddress",
      "kind": "function",
      "memberof": "IContract",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000540",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @description Get user ETH Balance of Address connected via login()\n   * @return {Promise<string>} User ETH Balance\n   */",
      "meta": {
        "range": [
          10564,
          10649
        ],
        "filename": "IContract.js",
        "lineno": 406,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models",
        "code": {
          "id": "astnode100005955",
          "name": "IContract#getUserETHBalance",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "kind": "function",
      "description": "Get user ETH Balance of Address connected via login()",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<string>"
            ]
          },
          "description": "User ETH Balance"
        }
      ],
      "name": "getUserETHBalance",
      "longname": "IContract#getUserETHBalance",
      "memberof": "IContract",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000541",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef {Object} StakingContract~Options\n * @property {string} tokenAddress\n * @property {Boolean} test\n * @property {Boolean} localtest ganache local blockchain\n * @property {Web3Connection} [web3Connection=Web3Connection] created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'\n * @property {string} [contractAddress]\n */",
      "meta": {
        "filename": "StakingContract.js",
        "lineno": 7,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {}
      },
      "kind": "typedef",
      "name": "Options",
      "type": {
        "names": [
          "Object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "tokenAddress"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "name": "test"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "ganache local blockchain",
          "name": "localtest"
        },
        {
          "type": {
            "names": [
              "Web3Connection"
            ]
          },
          "optional": true,
          "defaultvalue": "Web3Connection",
          "description": "created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'",
          "name": "web3Connection"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "name": "contractAddress"
        }
      ],
      "memberof": "StakingContract",
      "longname": "StakingContract~Options",
      "scope": "inner",
      "___id": "T000002R000543",
      "___s": true
    },
    {
      "comment": "/**\n * Staking Contract Object\n * @class StakingContract\n * @param {StakingContract~Options} options\n */",
      "meta": {
        "filename": "StakingContract.js",
        "lineno": 16,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {}
      },
      "description": "Staking Contract Object",
      "kind": "class",
      "name": "StakingContract",
      "params": [
        {
          "type": {
            "names": [
              "StakingContract~Options"
            ]
          },
          "name": "options"
        }
      ],
      "longname": "StakingContract",
      "scope": "global",
      "___id": "T000002R000544",
      "___s": true
    },
    {
      "comment": "/**\n   * Get ERC20 Address of the Contract\n   * @returns {Promise<Address>}\n   */",
      "meta": {
        "range": [
          1140,
          1268
        ],
        "filename": "StakingContract.js",
        "lineno": 40,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100006038",
          "name": "StakingContract#erc20",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get ERC20 Address of the Contract",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Address>"
            ]
          }
        }
      ],
      "name": "erc20",
      "longname": "StakingContract#erc20",
      "kind": "function",
      "memberof": "StakingContract",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000551",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Token Amount of ERC20 Address\n   * @function\n   * @param {Object} params\n   * @param {Address} params.address\n   * @returns {Promise<number>}\n   */",
      "meta": {
        "range": [
          1435,
          1529
        ],
        "filename": "StakingContract.js",
        "lineno": 54,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100006062",
          "name": "getTokenAmount",
          "type": "ClassProperty"
        }
      },
      "description": "Get Token Amount of ERC20 Address",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "getTokenAmount",
      "longname": "StakingContract#getTokenAmount",
      "memberof": "StakingContract",
      "scope": "instance",
      "___id": "T000002R000552",
      "___s": true
    },
    {
      "comment": "/**\n   * Get All Tokens Locked for the APR\n   * @returns {Promise<number>}\n   */",
      "meta": {
        "range": [
          1616,
          1852
        ],
        "filename": "StakingContract.js",
        "lineno": 60,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100006076",
          "name": "StakingContract#futureLockedTokens",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get All Tokens Locked for the APR",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "futureLockedTokens",
      "longname": "StakingContract#futureLockedTokens",
      "kind": "function",
      "memberof": "StakingContract",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000554",
      "___s": true
    },
    {
      "comment": "/**\n   * Get All Tokens Available for the Subscription Amount\n   * @returns {Promise<number>}\n   */",
      "meta": {
        "range": [
          1958,
          2188
        ],
        "filename": "StakingContract.js",
        "lineno": 72,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100006115",
          "name": "StakingContract#availableTokens",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get All Tokens Available for the Subscription Amount",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "availableTokens",
      "longname": "StakingContract#availableTokens",
      "kind": "function",
      "memberof": "StakingContract",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000556",
      "___s": true
    },
    {
      "comment": "/**\n   * Get All Tokens Held in Stake at that specific moment\n   * @returns {Promise<number>}\n   */",
      "meta": {
        "range": [
          2294,
          2514
        ],
        "filename": "StakingContract.js",
        "lineno": 84,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100006154",
          "name": "StakingContract#heldTokens",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get All Tokens Held in Stake at that specific moment",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "heldTokens",
      "longname": "StakingContract#heldTokens",
      "kind": "function",
      "memberof": "StakingContract",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000558",
      "___s": true
    },
    {
      "comment": "/**\n   * Get APR Amount based on amount of timestamp, amount and APR of that product\n   * @function\n   * @param {Object} params\n   * @param {Integer} params.APR\n   * @param {Date} params.startDate\n   * @param {Date} params.endDate\n   * @param {Integer} params.amount Token Amount\n   * @returns {Promise<number>}\n   */",
      "meta": {
        "range": [
          2838,
          3386
        ],
        "filename": "StakingContract.js",
        "lineno": 102,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100006193",
          "name": "getAPRAmount",
          "type": "ClassProperty"
        }
      },
      "description": "Get APR Amount based on amount of timestamp, amount and APR of that product",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "name": "params.APR"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "name": "params.startDate"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "name": "params.endDate"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "Token Amount",
          "name": "params.amount"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          }
        }
      ],
      "name": "getAPRAmount",
      "longname": "StakingContract#getAPRAmount",
      "memberof": "StakingContract",
      "scope": "instance",
      "___id": "T000002R000560",
      "___s": true
    },
    {
      "comment": "/**\n   * Creates a product\n   * @param {Object} params\n   * @param {Date} params.startDate\n   * @param {Date} params.endDate\n   * @param {Integer} params.totalMaxAmount\n   * @param {Integer} params.individualMinimumAmount\n   * @param {Integer} params.individualMaxAmount\n   * @param {Integer} params.APR\n   * @param {Boolean} params.lockedUntilFinalization\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          3797,
          4676
        ],
        "filename": "StakingContract.js",
        "lineno": 134,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100006263",
          "name": "StakingContract#createProduct",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a product",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "name": "params.startDate"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "name": "params.endDate"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "name": "params.totalMaxAmount"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "name": "params.individualMinimumAmount"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "name": "params.individualMaxAmount"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "name": "params.APR"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "name": "params.lockedUntilFinalization"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "createProduct",
      "longname": "StakingContract#createProduct",
      "kind": "function",
      "memberof": "StakingContract",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000566",
      "___s": true
    },
    {
      "comment": "/**\n   * Get All Available Products Ids\n   * @function\n   * @returns {Promise<number[]>} ids\n   */",
      "meta": {
        "range": [
          4781,
          4906
        ],
        "filename": "StakingContract.js",
        "lineno": 172,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100006349",
          "name": "getProducts",
          "type": "ClassProperty"
        }
      },
      "description": "Get All Available Products Ids",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<number>>"
            ]
          },
          "description": "ids"
        }
      ],
      "name": "getProducts",
      "longname": "StakingContract#getProducts",
      "memberof": "StakingContract",
      "scope": "instance",
      "___id": "T000002R000574",
      "___s": true
    },
    {
      "comment": "/**\n   * @typedef {Object} StakingContract~Product\n   * @property {Date} createdAt\n   * @property {Date} startDate\n   * @property {Date} endDate\n   * @property {boolean} lockedUntilFinalization\n   * @property {number} APR\n   * @property {number} currentAmount\n   * @property {number} individualMinimumAmount\n   * @property {number} individualMaxAmount\n   * @property {number} totalMaxAmount\n   * @property {number[]} subscriptionIds\n   * @property {Address[]} subscribers\n   * @property {number} _id\n   */",
      "meta": {
        "filename": "StakingContract.js",
        "lineno": 177,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {}
      },
      "kind": "typedef",
      "name": "Product",
      "type": {
        "names": [
          "Object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "name": "createdAt"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "name": "startDate"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "name": "endDate"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "name": "lockedUntilFinalization"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "APR"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "currentAmount"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "individualMinimumAmount"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "individualMaxAmount"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "totalMaxAmount"
        },
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "name": "subscriptionIds"
        },
        {
          "type": {
            "names": [
              "Array.<Address>"
            ]
          },
          "name": "subscribers"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "_id"
        }
      ],
      "memberof": "StakingContract",
      "longname": "StakingContract~Product",
      "scope": "inner",
      "___id": "T000002R000575",
      "___s": true
    },
    {
      "comment": "/**\n   * Get product\n   * @function\n   * @param {Object} params\n   * @param {number} params.product_id\n   * @return {Promise<StakingContract~Product>}\n   */",
      "meta": {
        "range": [
          5578,
          6622
        ],
        "filename": "StakingContract.js",
        "lineno": 200,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100006370",
          "name": "getProduct",
          "type": "ClassProperty"
        }
      },
      "description": "Get product",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.product_id"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<StakingContract~Product>"
            ]
          }
        }
      ],
      "name": "getProduct",
      "longname": "StakingContract#getProduct",
      "memberof": "StakingContract",
      "scope": "instance",
      "___id": "T000002R000576",
      "___s": true
    },
    {
      "comment": "/**\n   * Approve ERC20 Allowance for Transfer for Subscribe Product\n   * @function\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          6759,
          7092
        ],
        "filename": "StakingContract.js",
        "lineno": 239,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100006510",
          "name": "approveERC20Transfer",
          "type": "ClassProperty"
        }
      },
      "description": "Approve ERC20 Allowance for Transfer for Subscribe Product",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "approveERC20Transfer",
      "longname": "StakingContract#approveERC20Transfer",
      "memberof": "StakingContract",
      "scope": "instance",
      "___id": "T000002R000591",
      "___s": true
    },
    {
      "comment": "/**\n   * Subscribe to a product Staking\n   * @function\n   * @param {Object} params\n   * @param {number} params.product_id\n   * @param {number} params.amount\n   * @throws {Error} Has to Approve Token Transfer First, use the 'approve' Call\n   * @returns {Promise<boolean>} Success\n   */",
      "meta": {
        "range": [
          7383,
          8104
        ],
        "filename": "StakingContract.js",
        "lineno": 259,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100006552",
          "name": "subscribeProduct",
          "type": "ClassProperty"
        }
      },
      "description": "Subscribe to a product Staking",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.product_id"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.amount"
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Has to Approve Token Transfer First, use the 'approve' Call"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<boolean>"
            ]
          },
          "description": "Success"
        }
      ],
      "name": "subscribeProduct",
      "longname": "StakingContract#subscribeProduct",
      "memberof": "StakingContract",
      "scope": "instance",
      "___id": "T000002R000595",
      "___s": true
    },
    {
      "comment": "/**\n   * @typedef {Object} StakingContract~ProductSubscription\n   * @property {number} amount\n   * @property {number} APR\n   * @property {number} withdrawAmount\n   * @property {number} productId\n   * @property {number} _id\n   * @property {Address} subscriberAddress\n   * @property {Date} startDate\n   * @property {Date} endDate\n   * @property {boolean} finalized\n   */",
      "meta": {
        "filename": "StakingContract.js",
        "lineno": 284,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {}
      },
      "kind": "typedef",
      "name": "ProductSubscription",
      "type": {
        "names": [
          "Object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "amount"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "APR"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "withdrawAmount"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "productId"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "_id"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "subscriberAddress"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "name": "startDate"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "name": "endDate"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "name": "finalized"
        }
      ],
      "memberof": "StakingContract",
      "longname": "StakingContract~ProductSubscription",
      "scope": "inner",
      "___id": "T000002R000604",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Subscription from product\n   * @function\n   * @param {Object} params\n   * @param {number} params.subscription_id\n   * @param {number} params.product_id\n   * @return {Promise<StakingContract~ProductSubscription>}\n   */",
      "meta": {
        "range": [
          8713,
          9507
        ],
        "filename": "StakingContract.js",
        "lineno": 305,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100006627",
          "name": "getSubscription",
          "type": "ClassProperty"
        }
      },
      "description": "Get Subscription from product",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.subscription_id"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.product_id"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<StakingContract~ProductSubscription>"
            ]
          }
        }
      ],
      "name": "getSubscription",
      "longname": "StakingContract#getSubscription",
      "memberof": "StakingContract",
      "scope": "instance",
      "___id": "T000002R000605",
      "___s": true
    },
    {
      "comment": "/**\n   * Withdraw Subscription to a product Staking\n   * @function\n   * @param {Object} params\n   * @param {number} params.subscription_id\n   * @param {number} params.product_id\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          9739,
          9942
        ],
        "filename": "StakingContract.js",
        "lineno": 340,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100006738",
          "name": "withdrawSubscription",
          "type": "ClassProperty"
        }
      },
      "description": "Withdraw Subscription to a product Staking",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.subscription_id"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.product_id"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "withdrawSubscription",
      "longname": "StakingContract#withdrawSubscription",
      "memberof": "StakingContract",
      "scope": "instance",
      "___id": "T000002R000618",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Subscriptions by Address\n   * @function\n   * @param {Object} params\n   * @param {Address} params.address\n   * @returns {Promise<number[]>} subscriptions_ids\n   */",
      "meta": {
        "range": [
          10124,
          10368
        ],
        "filename": "StakingContract.js",
        "lineno": 353,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100006765",
          "name": "getSubscriptionsByAddress",
          "type": "ClassProperty"
        }
      },
      "description": "Get Subscriptions by Address",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<number>>"
            ]
          },
          "description": "subscriptions_ids"
        }
      ],
      "name": "getSubscriptionsByAddress",
      "longname": "StakingContract#getSubscriptionsByAddress",
      "memberof": "StakingContract",
      "scope": "instance",
      "___id": "T000002R000621",
      "___s": true
    },
    {
      "comment": "/**\n   * Get All Subscriptions done\n   * @function\n   * @returns {Promise<Subscription[]>} subscriptions\n   */",
      "meta": {
        "range": [
          10485,
          11097
        ],
        "filename": "StakingContract.js",
        "lineno": 366,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100006806",
          "name": "getAllSubscriptions",
          "type": "ClassProperty"
        }
      },
      "description": "Get All Subscriptions done",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Array.<Subscription>>"
            ]
          },
          "description": "subscriptions"
        }
      ],
      "name": "getAllSubscriptions",
      "longname": "StakingContract#getAllSubscriptions",
      "memberof": "StakingContract",
      "scope": "instance",
      "___id": "T000002R000624",
      "___s": true
    },
    {
      "comment": "/**\n   * Transfer Tokens by the Admin to ensure APR Amount\n   * @function\n   * @param {Object} params\n   * @param {number} params.amount\n   * @param {Promise<number>} amount\n   */",
      "meta": {
        "range": [
          11283,
          11464
        ],
        "filename": "StakingContract.js",
        "lineno": 394,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100006875",
          "name": "StakingContract#depositAPRTokensByAdmin",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Transfer Tokens by the Admin to ensure APR Amount",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.amount"
        },
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          },
          "name": "amount"
        }
      ],
      "name": "depositAPRTokensByAdmin",
      "longname": "StakingContract#depositAPRTokensByAdmin",
      "memberof": "StakingContract",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000631",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Total Amount of tokens needed to be deposited by Admin to ensure APR for all available Products\n   * @function\n   * @return {Promise<number>} Amount\n   */",
      "meta": {
        "range": [
          11638,
          12282
        ],
        "filename": "StakingContract.js",
        "lineno": 406,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100006899",
          "name": "getTotalNeededTokensForAPRbyAdmin",
          "type": "ClassProperty"
        }
      },
      "description": "Get Total Amount of tokens needed to be deposited by Admin to ensure APR for all available Products",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          },
          "description": "Amount"
        }
      ],
      "name": "getTotalNeededTokensForAPRbyAdmin",
      "longname": "StakingContract#getTotalNeededTokensForAPRbyAdmin",
      "memberof": "StakingContract",
      "scope": "instance",
      "___id": "T000002R000635",
      "___s": true
    },
    {
      "comment": "/**\n   * @async\n   * @function\n   * @throws {Error} Contract is not deployed, first deploy it and provide a contract address\n   * @void\n   */",
      "meta": {
        "range": [
          12430,
          13065
        ],
        "filename": "StakingContract.js",
        "lineno": 434,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100006984",
          "name": "__assert",
          "type": "ClassProperty"
        }
      },
      "async": true,
      "kind": "function",
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Contract is not deployed, first deploy it and provide a contract address"
        }
      ],
      "tags": [
        {
          "originalTitle": "void",
          "title": "void",
          "text": ""
        }
      ],
      "name": "__assert",
      "longname": "StakingContract#__assert",
      "memberof": "StakingContract",
      "scope": "instance",
      "___id": "T000002R000645",
      "___s": true
    },
    {
      "comment": "/**\n   * Deploy the Staking Contract\n   * @function\n   * @param [Object] params\n   * @param {function():void} params.callback\n   * @return {Promise<*>}\n   */",
      "meta": {
        "range": [
          13229,
          13609
        ],
        "filename": "StakingContract.js",
        "lineno": 463,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100007060",
          "name": "deploy",
          "type": "ClassProperty"
        }
      },
      "description": "Deploy the Staking Contract",
      "kind": "function",
      "params": [
        {
          "optional": true,
          "description": "params",
          "name": "Object"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "params.callback"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<*>"
            ]
          }
        }
      ],
      "name": "deploy",
      "longname": "StakingContract#deploy",
      "memberof": "StakingContract",
      "scope": "instance",
      "___id": "T000002R000649",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @return ERC20Contract|undefined\n   */",
      "meta": {
        "range": [
          13677,
          13728
        ],
        "filename": "StakingContract.js",
        "lineno": 479,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking",
        "code": {
          "id": "astnode100007118",
          "name": "getERC20Contract",
          "type": "ClassProperty"
        }
      },
      "kind": "function",
      "returns": [
        {
          "description": "ERC20Contract|undefined"
        }
      ],
      "name": "getERC20Contract",
      "longname": "StakingContract#getERC20Contract",
      "memberof": "StakingContract",
      "scope": "instance",
      "___id": "T000002R000654",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef {Object} VotingContract~Options\n * @property {Boolean} test\n * @property {Boolean} localtest ganache local blockchain\n * @property {Web3Connection} [web3Connection=Web3Connection] created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'\n * @property {string} [contractAddress]\n */",
      "meta": {
        "filename": "VotingContract.js",
        "lineno": 7,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {}
      },
      "kind": "typedef",
      "name": "Options",
      "type": {
        "names": [
          "Object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "name": "test"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "ganache local blockchain",
          "name": "localtest"
        },
        {
          "type": {
            "names": [
              "Web3Connection"
            ]
          },
          "optional": true,
          "defaultvalue": "Web3Connection",
          "description": "created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'",
          "name": "web3Connection"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "name": "contractAddress"
        }
      ],
      "memberof": "VotingContract",
      "longname": "VotingContract~Options",
      "scope": "inner",
      "___id": "T000002R000656",
      "___s": true
    },
    {
      "comment": "/**\n * Voting Contract Object\n * @class VotingContract\n * @param {VotingContract~Options} options\n */",
      "meta": {
        "filename": "VotingContract.js",
        "lineno": 15,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {}
      },
      "description": "Voting Contract Object",
      "kind": "class",
      "name": "VotingContract",
      "params": [
        {
          "type": {
            "names": [
              "VotingContract~Options"
            ]
          },
          "name": "options"
        }
      ],
      "longname": "VotingContract",
      "scope": "global",
      "___id": "T000002R000657",
      "___s": true
    },
    {
      "comment": "/**\n   * Get ERC20 Address of the Contract\n   * @returns {Promise<Address>}\n   */",
      "meta": {
        "range": [
          894,
          1022
        ],
        "filename": "VotingContract.js",
        "lineno": 33,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {
          "id": "astnode100007173",
          "name": "VotingContract#erc20",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get ERC20 Address of the Contract",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Address>"
            ]
          }
        }
      ],
      "name": "erc20",
      "longname": "VotingContract#erc20",
      "kind": "function",
      "memberof": "VotingContract",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R000661",
      "___s": true
    },
    {
      "comment": "/**\n   * Creates a Pool\n   * @param {String} params.description\n   * @param {Integer} params.expirationTime\n   * @param {Array | Integer} params.options\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          1229,
          1538
        ],
        "filename": "VotingContract.js",
        "lineno": 47,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {
          "id": "astnode100007197",
          "name": "VotingContract#createPool",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a Pool",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "name": "params.description"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "name": "params.expirationTime"
        },
        {
          "type": {
            "names": [
              "Array",
              "Integer"
            ]
          },
          "name": "params.options"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "createPool",
      "longname": "VotingContract#createPool",
      "kind": "function",
      "memberof": "VotingContract",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000662",
      "___s": true
    },
    {
      "comment": "/**\n   * Creates a Pool\n   * @param {Integer} params.poolId\n   * @return {Promise<TransactionObject>}\n   */",
      "meta": {
        "range": [
          1652,
          1834
        ],
        "filename": "VotingContract.js",
        "lineno": 68,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {
          "id": "astnode100007234",
          "name": "VotingContract#endPool",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a Pool",
      "params": [
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "name": "params.poolId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "endPool",
      "longname": "VotingContract#endPool",
      "kind": "function",
      "memberof": "VotingContract",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000666",
      "___s": true
    },
    {
      "comment": "/**\n     * Cast Vote\n     * @param {Integer} params.poolId Pool Id\n     * @param {Integer} params.voteId Vote Position on Length\n     * @return {Promise<TransactionObject>}\n     */",
      "meta": {
        "range": [
          2021,
          2235
        ],
        "filename": "VotingContract.js",
        "lineno": 86,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {
          "id": "astnode100007261",
          "name": "VotingContract#castVote",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Cast Vote",
      "params": [
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "Pool Id",
          "name": "params.poolId"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "Vote Position on Length",
          "name": "params.voteId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "castVote",
      "longname": "VotingContract#castVote",
      "kind": "function",
      "memberof": "VotingContract",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000668",
      "___s": true
    },
    {
      "comment": "/**\n     * Stake Voting Tokens\n     * @param {Integer} params.tokens Tokens\n     * @return {Promise<TransactionObject>}\n     */",
      "meta": {
        "range": [
          2369,
          2680
        ],
        "filename": "VotingContract.js",
        "lineno": 105,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {
          "id": "astnode100007291",
          "name": "VotingContract#stakeVotingTokens",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Stake Voting Tokens",
      "params": [
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "Tokens",
          "name": "params.tokens"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "stakeVotingTokens",
      "longname": "VotingContract#stakeVotingTokens",
      "kind": "function",
      "memberof": "VotingContract",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000671",
      "___s": true
    },
    {
      "comment": "/**\n   * @typedef {Object} VotingContract~Pool\n   * @property {Address} creator\n   * @property {Bool} status\n   * @property {Integer} optionsSize\n   * @property {String} description\n   * @property {Array | Address} voters\n   * @property {Date} expirationTime\n   */",
      "meta": {
        "filename": "VotingContract.js",
        "lineno": 120,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {}
      },
      "kind": "typedef",
      "name": "Pool",
      "type": {
        "names": [
          "Object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "creator"
        },
        {
          "type": {
            "names": [
              "Bool"
            ]
          },
          "name": "status"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "name": "optionsSize"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "name": "description"
        },
        {
          "type": {
            "names": [
              "Array",
              "Address"
            ]
          },
          "name": "voters"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "name": "expirationTime"
        }
      ],
      "memberof": "VotingContract",
      "longname": "VotingContract~Pool",
      "scope": "inner",
      "___id": "T000002R000673",
      "___s": true
    },
    {
      "comment": "/**\n     * Get Pool Information\n     * @function\n     * @param {Object} params\n     * @param {Integer} params.poolId\n     * @return {Promise<VotingContract~Pool>}\n     */",
      "meta": {
        "range": [
          3129,
          3583
        ],
        "filename": "VotingContract.js",
        "lineno": 137,
        "columnno": 4,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {
          "id": "astnode100007329",
          "name": "getPoolInformation",
          "type": "ClassProperty"
        }
      },
      "description": "Get Pool Information",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "name": "params.poolId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<VotingContract~Pool>"
            ]
          }
        }
      ],
      "name": "getPoolInformation",
      "longname": "VotingContract#getPoolInformation",
      "memberof": "VotingContract",
      "scope": "instance",
      "___id": "T000002R000674",
      "___s": true
    },
    {
      "comment": "/**\n     * Get Pool Winner\n     * @function\n     * @param {Object} params\n     * @param {Integer} params.poolId\n     * @return {Integer} Winner Id\n     * @return {Integer} Winner Id Index\n     */",
      "meta": {
        "range": [
          3790,
          4086
        ],
        "filename": "VotingContract.js",
        "lineno": 162,
        "columnno": 5,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {
          "id": "astnode100007393",
          "name": "getPoolWinner",
          "type": "ClassProperty"
        }
      },
      "description": "Get Pool Winner",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "name": "params.poolId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "Winner Id"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "Winner Id Index"
        }
      ],
      "name": "getPoolWinner",
      "longname": "VotingContract#getPoolWinner",
      "memberof": "VotingContract",
      "scope": "instance",
      "___id": "T000002R000684",
      "___s": true
    },
    {
      "comment": "/**\n     * Get Pool Winner\n     * @function\n     * @param {Object} params\n     * @param {Integer} params.poolId Pool Id\n     * @param {Integer} params.optionIndex Option Id for Pool\n     * @return {Integer} Option Id\n     */",
      "meta": {
        "range": [
          4323,
          4581
        ],
        "filename": "VotingContract.js",
        "lineno": 182,
        "columnno": 5,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {
          "id": "astnode100007438",
          "name": "getPollOptionById",
          "type": "ClassProperty"
        }
      },
      "description": "Get Pool Winner",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "Pool Id",
          "name": "params.poolId"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "Option Id for Pool",
          "name": "params.optionIndex"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "Option Id"
        }
      ],
      "name": "getPollOptionById",
      "longname": "VotingContract#getPollOptionById",
      "memberof": "VotingContract",
      "scope": "instance",
      "___id": "T000002R000689",
      "___s": true
    },
    {
      "comment": "/**\n     * Get Pool History for Address\n     * @function\n     * @param {Object} params\n     * @param {Address} params.address\n     * @return {Array | Integer} Pool Ids\n     */",
      "meta": {
        "range": [
          4770,
          5046
        ],
        "filename": "VotingContract.js",
        "lineno": 198,
        "columnno": 6,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {
          "id": "astnode100007477",
          "name": "getPollHistory",
          "type": "ClassProperty"
        }
      },
      "description": "Get Pool History for Address",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array",
              "Integer"
            ]
          },
          "description": "Pool Ids"
        }
      ],
      "name": "getPollHistory",
      "longname": "VotingContract#getPollHistory",
      "memberof": "VotingContract",
      "scope": "instance",
      "___id": "T000002R000693",
      "___s": true
    },
    {
      "comment": "/**\n     * Get Pool Info for Voter\n     * @function\n     * @param {Object} params\n     * @param {Integer} params.poolId\n     * @param {Address} params.voter\n     * @return {Integer} Vote\n     * @return {Integer} Weigth (Token Value)\n     */",
      "meta": {
        "range": [
          5297,
          5693
        ],
        "filename": "VotingContract.js",
        "lineno": 218,
        "columnno": 4,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {
          "id": "astnode100007521",
          "name": "getPollInfoForVoter",
          "type": "ClassProperty"
        }
      },
      "description": "Get Pool Info for Voter",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "name": "params.poolId"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.voter"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "Vote"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "Weigth (Token Value)"
        }
      ],
      "name": "getPollInfoForVoter",
      "longname": "VotingContract#getPollInfoForVoter",
      "memberof": "VotingContract",
      "scope": "instance",
      "___id": "T000002R000697",
      "___s": true
    },
    {
      "comment": "/**\n     * Check if a User has voted\n     * @function\n     * @param {Object} params\n     * @param {Integer} params.poolId\n     * @param {Address} params.voter\n     * @return {Bool} HasVoted\n     */",
      "meta": {
        "range": [
          5902,
          6124
        ],
        "filename": "VotingContract.js",
        "lineno": 241,
        "columnno": 5,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {
          "id": "astnode100007577",
          "name": "userHasVoted",
          "type": "ClassProperty"
        }
      },
      "description": "Check if a User has voted",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "name": "params.poolId"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.voter"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Bool"
            ]
          },
          "description": "HasVoted"
        }
      ],
      "name": "userHasVoted",
      "longname": "VotingContract#userHasVoted",
      "memberof": "VotingContract",
      "scope": "instance",
      "___id": "T000002R000703",
      "___s": true
    },
    {
      "comment": "/**\n     * Get Locked Amount\n     * @function\n     * @param {Object} params\n     * @param {Address} params.voter\n     * @return {Integer} Locked Amount\n     */",
      "meta": {
        "range": [
          6297,
          6609
        ],
        "filename": "VotingContract.js",
        "lineno": 258,
        "columnno": 5,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {
          "id": "astnode100007613",
          "name": "getLockedAmount",
          "type": "ClassProperty"
        }
      },
      "description": "Get Locked Amount",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.voter"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "Locked Amount"
        }
      ],
      "name": "getLockedAmount",
      "longname": "VotingContract#getLockedAmount",
      "memberof": "VotingContract",
      "scope": "instance",
      "___id": "T000002R000707",
      "___s": true
    },
    {
      "comment": "/**\n     * Withdraw Tokens from Voting\n     * @param {Integer} params.tokens Tokens\n     * @return {Promise<TransactionObject>}\n     */",
      "meta": {
        "range": [
          6757,
          7101
        ],
        "filename": "VotingContract.js",
        "lineno": 275,
        "columnno": 5,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {
          "id": "astnode100007657",
          "name": "VotingContract#withdrawTokens",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Withdraw Tokens from Voting",
      "params": [
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "Tokens",
          "name": "params.tokens"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          }
        }
      ],
      "name": "withdrawTokens",
      "longname": "VotingContract#withdrawTokens",
      "kind": "function",
      "memberof": "VotingContract",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000710",
      "___s": true
    },
    {
      "comment": "/**\n   * @async\n   * @function\n   * @throws {Error} Contract is not deployed, first deploy it and provide a contract address\n   * @void\n   */",
      "meta": {
        "range": [
          7249,
          7884
        ],
        "filename": "VotingContract.js",
        "lineno": 296,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {
          "id": "astnode100007695",
          "name": "__assert",
          "type": "ClassProperty"
        }
      },
      "async": true,
      "kind": "function",
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Contract is not deployed, first deploy it and provide a contract address"
        }
      ],
      "tags": [
        {
          "originalTitle": "void",
          "title": "void",
          "text": ""
        }
      ],
      "name": "__assert",
      "longname": "VotingContract#__assert",
      "memberof": "VotingContract",
      "scope": "instance",
      "___id": "T000002R000712",
      "___s": true
    },
    {
      "comment": "/**\n   * Deploy the Staking Contract\n   * @function\n   * @param [Object] params\n   * @param {Address} params.erc20Contract\n   * @param {function():void} params.callback\n   * @return {Promise<*>}\n   */",
      "meta": {
        "range": [
          8091,
          8369
        ],
        "filename": "VotingContract.js",
        "lineno": 327,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {
          "id": "astnode100007771",
          "name": "deploy",
          "type": "ClassProperty"
        }
      },
      "description": "Deploy the Staking Contract",
      "kind": "function",
      "params": [
        {
          "optional": true,
          "description": "params",
          "name": "Object"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "name": "params.erc20Contract"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "params.callback"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<*>"
            ]
          }
        }
      ],
      "name": "deploy",
      "longname": "VotingContract#deploy",
      "memberof": "VotingContract",
      "scope": "instance",
      "___id": "T000002R000716",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @return ERC20Contract|undefined\n   */",
      "meta": {
        "range": [
          8437,
          8488
        ],
        "filename": "VotingContract.js",
        "lineno": 340,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting",
        "code": {
          "id": "astnode100007814",
          "name": "getERC20Contract",
          "type": "ClassProperty"
        }
      },
      "kind": "function",
      "returns": [
        {
          "description": "ERC20Contract|undefined"
        }
      ],
      "name": "getERC20Contract",
      "longname": "VotingContract#getERC20Contract",
      "memberof": "VotingContract",
      "scope": "instance",
      "___id": "T000002R000722",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef {Object} OpenerRealFvr~Options\n * @property {Boolean} test\n * @property {Boolean} localtest ganache local blockchain\n * @property {Web3Connection} [web3Connection=Web3Connection] created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'\n * @property {string} [contractAddress]\n * @property {string} [tokenAddress]\n */",
      "meta": {
        "filename": "OpenerRealFvr.js",
        "lineno": 6,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {}
      },
      "kind": "typedef",
      "name": "Options",
      "type": {
        "names": [
          "Object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "name": "test"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "ganache local blockchain",
          "name": "localtest"
        },
        {
          "type": {
            "names": [
              "Web3Connection"
            ]
          },
          "optional": true,
          "defaultvalue": "Web3Connection",
          "description": "created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'",
          "name": "web3Connection"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "name": "contractAddress"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "name": "tokenAddress"
        }
      ],
      "memberof": "OpenerRealFvr",
      "longname": "OpenerRealFvr~Options",
      "scope": "inner",
      "___id": "T000002R000724",
      "___s": true
    },
    {
      "comment": "/**\n * OpenerRealFvr Object\n * @class OpenerRealFvr\n * @param {OpenerRealFvr~Options} options\n */",
      "meta": {
        "filename": "OpenerRealFvr.js",
        "lineno": 15,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {}
      },
      "description": "OpenerRealFvr Object",
      "kind": "class",
      "name": "OpenerRealFvr",
      "params": [
        {
          "type": {
            "names": [
              "OpenerRealFvr~Options"
            ]
          },
          "name": "options"
        }
      ],
      "longname": "OpenerRealFvr",
      "scope": "global",
      "___id": "T000002R000725",
      "___s": true
    },
    {
      "comment": "/**\n   * Asserts a new {@link ERC20Contract} on the current address\n   * @function\n   * @return {Promise<void>}\n   * @throws {Error} Contract is not deployed, first deploy it and provide a contract address\n   */",
      "meta": {
        "range": [
          1002,
          1539
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 31,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100007860",
          "name": "__assert",
          "type": "ClassProperty"
        }
      },
      "description": "Asserts a new {@link ERC20Contract} on the current address",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<void>"
            ]
          }
        }
      ],
      "exceptions": [
        {
          "type": {
            "names": [
              "Error"
            ]
          },
          "description": "Contract is not deployed, first deploy it and provide a contract address"
        }
      ],
      "name": "__assert",
      "longname": "OpenerRealFvr#__assert",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000729",
      "___s": true
    },
    {
      "comment": "/**\n   * Buy Pack\n   * @function\n   * @param {Object} params Parameters\n   * @param {number} params.packId Pack Id\n   * @returns {Promise<Transaction>} Transaction\n   */",
      "meta": {
        "range": [
          1715,
          1836
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 58,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100007916",
          "name": "buyPack",
          "type": "ClassProperty"
        }
      },
      "description": "Buy Pack",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Pack Id",
          "name": "params.packId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<Transaction>"
            ]
          },
          "description": "Transaction"
        }
      ],
      "name": "buyPack",
      "longname": "OpenerRealFvr#buyPack",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000733",
      "___s": true
    },
    {
      "comment": "/**\n   * Offer Pack\n   * @function\n   * @param {Object} params Parameters\n   * @param {number} params.packId Pack Id\n   * @param {Address} params.receivingAddress Pack Id number\n   * @returns {Promise<TransactionObject>} Success the Tx Object if operation was successful\n   */",
      "meta": {
        "range": [
          2119,
          2294
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 70,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100007940",
          "name": "offerPack",
          "type": "ClassProperty"
        }
      },
      "description": "Offer Pack",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Pack Id",
          "name": "params.packId"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "description": "Pack Id number",
          "name": "params.receivingAddress"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          },
          "description": "Success the Tx Object if operation was successful"
        }
      ],
      "name": "offerPack",
      "longname": "OpenerRealFvr#offerPack",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000735",
      "___s": true
    },
    {
      "comment": "/**\n   * Create Pack\n   * @function\n   * @param {Object} params Parameters\n   * @param {number} params.packNumber Pack Number\n   * @param {number} params.nftAmount Amount of NFTs/Tokens\n   * @param {number} params.price Price of Pack\n   * @param {string} params.serie Serie of Pack\n   * @param {string} params.packType Pack Type\n   * @param {string} params.drop Pack Drop\n   * @param {Date} params.saleStart Start Date\n   * @param {Address | Address[]} params.saleDistributionAddresses Revenue Addresses of the First Purchase\n   * @param {number | number[]} params.saleDistributionAmounts Revenue Amounts of the First Purchase\n   * @returns {Promise<TransactionObject>} Success the Tx Object if operation was successful\n   */",
      "meta": {
        "range": [
          3026,
          3569
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 91,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100007967",
          "name": "createPack",
          "type": "ClassProperty"
        }
      },
      "description": "Create Pack",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Pack Number",
          "name": "params.packNumber"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Amount of NFTs/Tokens",
          "name": "params.nftAmount"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Price of Pack",
          "name": "params.price"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Serie of Pack",
          "name": "params.serie"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Pack Type",
          "name": "params.packType"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Pack Drop",
          "name": "params.drop"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "description": "Start Date",
          "name": "params.saleStart"
        },
        {
          "type": {
            "names": [
              "Address",
              "Array.<Address>"
            ]
          },
          "description": "Revenue Addresses of the First Purchase",
          "name": "params.saleDistributionAddresses"
        },
        {
          "type": {
            "names": [
              "number",
              "Array.<number>"
            ]
          },
          "description": "Revenue Amounts of the First Purchase",
          "name": "params.saleDistributionAmounts"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          },
          "description": "Success the Tx Object if operation was successful"
        }
      ],
      "name": "createPack",
      "longname": "OpenerRealFvr#createPack",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000738",
      "___s": true
    },
    {
      "comment": "/**\n   * Edit Pack Info\n   * @function\n   * @param {Object} params Parameters\n   * @param {number} params.packId Pack Number\n   * @param {Date} params.saleStart Time of Start of the Sale\n   * @param {string} params.serie Serie of Pack\n   * @param {string} params.packType Pack Type\n   * @param {string} params.drop Pack Drop\n   * @param {number} params.price Pack Price\n   * @returns {Promise<TransactionObject>} Success the Tx Object if operation was successful\n   */",
      "meta": {
        "range": [
          4044,
          4385
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 129,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100008027",
          "name": "editPackInfo",
          "type": "ClassProperty"
        }
      },
      "description": "Edit Pack Info",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Pack Number",
          "name": "params.packId"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "description": "Time of Start of the Sale",
          "name": "params.saleStart"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Serie of Pack",
          "name": "params.serie"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Pack Type",
          "name": "params.packType"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Pack Drop",
          "name": "params.drop"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Pack Price",
          "name": "params.price"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          },
          "description": "Success the Tx Object if operation was successful"
        }
      ],
      "name": "editPackInfo",
      "longname": "OpenerRealFvr#editPackInfo",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000748",
      "___s": true
    },
    {
      "comment": "/**\n   * Delete Pack\n   * @function\n   * @param {Object} params Parameters\n   * @param {number} params.packId Pack Id number\n   * @returns {Promise<TransactionObject>} Success the Tx Object if operation was successful\n   */",
      "meta": {
        "range": [
          4615,
          4750
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 151,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100008075",
          "name": "deletePackById",
          "type": "ClassProperty"
        }
      },
      "description": "Delete Pack",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Pack Id number",
          "name": "params.packId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          },
          "description": "Success the Tx Object if operation was successful"
        }
      ],
      "name": "deletePackById",
      "longname": "OpenerRealFvr#deletePackById",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000755",
      "___s": true
    },
    {
      "comment": "/**\n   * Mint Token Id (After buying a pack)\n   * @function\n   * @param {Object} params Parameters\n   * @param {number} params.tokenId Token ID\n   * @returns {Promise<TransactionObject>} Success the Tx Object if operation was successful\n   */",
      "meta": {
        "range": [
          4999,
          5116
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 162,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100008099",
          "name": "mint",
          "type": "ClassProperty"
        }
      },
      "description": "Mint Token Id (After buying a pack)",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Token ID",
          "name": "params.tokenId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          },
          "description": "Success the Tx Object if operation was successful"
        }
      ],
      "name": "mint",
      "longname": "OpenerRealFvr#mint",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000757",
      "___s": true
    },
    {
      "comment": "/**\n   * Set Purchase Token\n   * @function\n   * @param {Object} params Parameters\n   * @param {Address} params.address Token Address\n   * @returns {Promise<TransactionObject>} Success the Tx Object if operation was successful\n   */",
      "meta": {
        "range": [
          5354,
          5523
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 173,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100008123",
          "name": "setPurchaseTokenAddress",
          "type": "ClassProperty"
        }
      },
      "description": "Set Purchase Token",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "description": "Token Address",
          "name": "params.address"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          },
          "description": "Success the Tx Object if operation was successful"
        }
      ],
      "name": "setPurchaseTokenAddress",
      "longname": "OpenerRealFvr#setPurchaseTokenAddress",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000759",
      "___s": true
    },
    {
      "comment": "/**\n   * Lock the Contract\n   * @function\n   * @returns {Promise<TransactionObject>} Success the Tx Object if operation was successful\n   */",
      "meta": {
        "range": [
          5670,
          5760
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 184,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100008147",
          "name": "lock",
          "type": "ClassProperty"
        }
      },
      "description": "Lock the Contract",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          },
          "description": "Success the Tx Object if operation was successful"
        }
      ],
      "name": "lock",
      "longname": "OpenerRealFvr#lock",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000761",
      "___s": true
    },
    {
      "comment": "/**\n   * Unlock the Contract\n   * @function\n   * @returns {Promise<TransactionObject>} Success the Tx Object if operation was successful\n   */",
      "meta": {
        "range": [
          5909,
          6003
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 191,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100008167",
          "name": "unlock",
          "type": "ClassProperty"
        }
      },
      "description": "Unlock the Contract",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          },
          "description": "Success the Tx Object if operation was successful"
        }
      ],
      "name": "unlock",
      "longname": "OpenerRealFvr#unlock",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000762",
      "___s": true
    },
    {
      "comment": "/**\n   * Set Token Price of Real Fvr in USD --> 1*10**18 as input means 1 Real Fvr = $0.000001\n   * @function\n   * @param {Object} params Parameters\n   * @param {Price} params.price Token Price\n   * @returns {Promise<TransactionObject>} Success the Tx Object if operation was successful\n   */",
      "meta": {
        "range": [
          6302,
          6457
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 200,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100008187",
          "name": "setTokenPriceInUSD",
          "type": "ClassProperty"
        }
      },
      "description": "Set Token Price of Real Fvr in USD --> 1*10**18 as input means 1 Real Fvr = $0.000001",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "Price"
            ]
          },
          "description": "Token Price",
          "name": "params.price"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          },
          "description": "Success the Tx Object if operation was successful"
        }
      ],
      "name": "setTokenPriceInUSD",
      "longname": "OpenerRealFvr#setTokenPriceInUSD",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000763",
      "___s": true
    },
    {
      "comment": "/**\n   * Set Base Id URI\n   * @function\n   * @param {Object} params Parameters\n   * @param {string} params.uri URI of the Token Id Metadata JSON\n   * @returns {Promise<TransactionObject>} Success the Tx Object if operation was successful\n   */",
      "meta": {
        "range": [
          6707,
          6828
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 213,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100008211",
          "name": "setBaseURI",
          "type": "ClassProperty"
        }
      },
      "description": "Set Base Id URI",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "URI of the Token Id Metadata JSON",
          "name": "params.uri"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          },
          "description": "Success the Tx Object if operation was successful"
        }
      ],
      "name": "setBaseURI",
      "longname": "OpenerRealFvr#setBaseURI",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000765",
      "___s": true
    },
    {
      "comment": "/**\n   * Set Specific Token Id URI\n   * @function\n   * @param {Object} params Parameters\n   * @param {number} params.tokenId Token ID\n   * @param {string} params.uri URI of the Token Id Metadata JSON\n   * @returns {Promise<TransactionObject>} Success the Tx Object if operation was successful\n   */",
      "meta": {
        "range": [
          7133,
          7274
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 225,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100008235",
          "name": "setTokenURI",
          "type": "ClassProperty"
        }
      },
      "description": "Set Specific Token Id URI",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Token ID",
          "name": "params.tokenId"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "URI of the Token Id Metadata JSON",
          "name": "params.uri"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<TransactionObject>"
            ]
          },
          "description": "Success the Tx Object if operation was successful"
        }
      ],
      "name": "setTokenURI",
      "longname": "OpenerRealFvr#setTokenURI",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000767",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Pack If Information\n   * @function\n   * @param {Object} params Parameters\n   * @param {number} params.packId\n   * @returns {number} packId\n   * @returns {number} packNumber\n   * @returns {number} price\n   * @returns {string} serie\n   * @returns {string} drop\n   * @returns {string} packType\n   * @returns {Address} buyer\n   * @returns {Address[] | Address} saleDistributionAddresses\n   * @returns {Promise<number[] | number>} saleDistributionAmounts\n   */",
      "meta": {
        "range": [
          7749,
          8264
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 244,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100008262",
          "name": "getPackbyId",
          "type": "ClassProperty"
        }
      },
      "description": "Get Pack If Information",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.packId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "packId"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "packNumber"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "price"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "serie"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "drop"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "packType"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "description": "buyer"
        },
        {
          "type": {
            "names": [
              "Array.<Address>",
              "Address"
            ]
          },
          "description": "saleDistributionAddresses"
        },
        {
          "type": {
            "names": [
              "Promise.<(Array.<number>|number)>"
            ]
          },
          "description": "saleDistributionAmounts"
        }
      ],
      "name": "getPackbyId",
      "longname": "OpenerRealFvr#getPackbyId",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000770",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Token IDs that were already bought via a pack\n   * @function\n   * @returns {Promise<number[] | number>} TokensRegistered\n   */",
      "meta": {
        "range": [
          8410,
          8596
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 268,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100008354",
          "name": "getRegisteredTokens",
          "type": "ClassProperty"
        }
      },
      "description": "Get Token IDs that were already bought via a pack",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<(Array.<number>|number)>"
            ]
          },
          "description": "TokensRegistered"
        }
      ],
      "name": "getRegisteredTokens",
      "longname": "OpenerRealFvr#getRegisteredTokens",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000783",
      "___s": true
    },
    {
      "comment": "/**\n   * Verify if a Token was already minted\n   * @function\n   * @param {Object} params Parameters\n   * @param {number} params.tokenId\n   * @returns {Promise<boolean>} wasMinted\n   */",
      "meta": {
        "range": [
          8787,
          8898
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 283,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100008388",
          "name": "exists",
          "type": "ClassProperty"
        }
      },
      "description": "Verify if a Token was already minted",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.tokenId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<boolean>"
            ]
          },
          "description": "wasMinted"
        }
      ],
      "name": "exists",
      "longname": "OpenerRealFvr#exists",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000785",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Cost in Fvr Tokens of the Pack\n   * @function\n   * @param {Object} params Parameters\n   * @param {number} params.packId\n   * @returns {Promise<number>} Price in Real Fvr Tokens\n   */",
      "meta": {
        "range": [
          9101,
          9293
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 295,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100008411",
          "name": "getPackPriceInFVR",
          "type": "ClassProperty"
        }
      },
      "description": "Get Cost in Fvr Tokens of the Pack",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "params.packId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          },
          "description": "Price in Real Fvr Tokens"
        }
      ],
      "name": "getPackPriceInFVR",
      "longname": "OpenerRealFvr#getPackPriceInFVR",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000787",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Amount of Packs Created\n   * @function\n   * @returns {Promise<number>} packsAmount\n   */",
      "meta": {
        "range": [
          9401,
          9540
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 304,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100008445",
          "name": "getAmountOfPacksCreated",
          "type": "ClassProperty"
        }
      },
      "description": "Get Amount of Packs Created",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          },
          "description": "packsAmount"
        }
      ],
      "name": "getAmountOfPacksCreated",
      "longname": "OpenerRealFvr#getAmountOfPacksCreated",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000789",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Amount of Packs Opened\n   * @function\n   * @returns {Promise<number>} packsAmount\n   */",
      "meta": {
        "range": [
          9647,
          9782
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 314,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100008467",
          "name": "getAmountOfPacksOpened",
          "type": "ClassProperty"
        }
      },
      "description": "Get Amount of Packs Opened",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          },
          "description": "packsAmount"
        }
      ],
      "name": "getAmountOfPacksOpened",
      "longname": "OpenerRealFvr#getAmountOfPacksOpened",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000790",
      "___s": true
    },
    {
      "comment": "/**\n   * Get Amount of Tokens/NFTs Created (Inherent to the Packs)\n   * @function\n   * @returns {Promise<number>} tokensAmount\n   */",
      "meta": {
        "range": [
          9921,
          10055
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 324,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100008489",
          "name": "getAmountOfTokensCreated",
          "type": "ClassProperty"
        }
      },
      "description": "Get Amount of Tokens/NFTs Created (Inherent to the Packs)",
      "kind": "function",
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<number>"
            ]
          },
          "description": "tokensAmount"
        }
      ],
      "name": "getAmountOfTokensCreated",
      "longname": "OpenerRealFvr#getAmountOfTokensCreated",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000791",
      "___s": true
    },
    {
      "comment": "/**\n   * User deploys the contract\n   * @function\n   * @param {Object} params Parameters\n   * @param {string} params.name Name of the Contract\n   * @param {string} params.symbol Symbol of the Contract\n   * @param {Address} params.tokenAddress token Address of the purchase Token in use\n   * @returns {Promise<boolean>} Success the Tx Object if operation was successful\n   */",
      "meta": {
        "range": [
          10436,
          10742
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 338,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100008511",
          "name": "deploy",
          "type": "ClassProperty"
        }
      },
      "description": "User deploys the contract",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Name of the Contract",
          "name": "params.name"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Symbol of the Contract",
          "name": "params.symbol"
        },
        {
          "type": {
            "names": [
              "Address"
            ]
          },
          "description": "token Address of the purchase Token in use",
          "name": "params.tokenAddress"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise.<boolean>"
            ]
          },
          "description": "Success the Tx Object if operation was successful"
        }
      ],
      "name": "deploy",
      "longname": "OpenerRealFvr#deploy",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000792",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @return ERC20Contract|undefined\n   */",
      "meta": {
        "range": [
          10810,
          10861
        ],
        "filename": "OpenerRealFvr.js",
        "lineno": 353,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr",
        "code": {
          "id": "astnode100008558",
          "name": "getERC20Contract",
          "type": "ClassProperty"
        }
      },
      "kind": "function",
      "returns": [
        {
          "description": "ERC20Contract|undefined"
        }
      ],
      "name": "getERC20Contract",
      "longname": "OpenerRealFvr#getERC20Contract",
      "memberof": "OpenerRealFvr",
      "scope": "instance",
      "___id": "T000002R000800",
      "___s": true
    },
    {
      "comment": "/**\n * DexStorage Object\n * @class DexStorage\n * @param {Object} params Parameters\n * @param {String} params.ipfsClientHTTP Optional, IPFS Infura Node API or object \n */",
      "meta": {
        "filename": "IPFS.js",
        "lineno": 5,
        "columnno": 0,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/utils",
        "code": {}
      },
      "description": "DexStorage Object",
      "kind": "class",
      "name": "DexStorage",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Optional, IPFS Infura Node API or object",
          "name": "params.ipfsClientHTTP"
        }
      ],
      "longname": "DexStorage",
      "scope": "global",
      "___id": "T000002R000881",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @description Save Data\n   * @param {Object} params Parameters\n   * @param {String} params.data Data String, if image blob info \n   * @returns {String} CID (Hash to be used to access the params.data later)\n   */",
      "meta": {
        "range": [
          775,
          889
        ],
        "filename": "IPFS.js",
        "lineno": 26,
        "columnno": 2,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/utils",
        "code": {
          "id": "astnode100009286",
          "name": "DexStorage#save",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "kind": "function",
      "description": "Save Data",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Data String, if image blob info",
          "name": "params.data"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "CID (Hash to be used to access the params.data later)"
        }
      ],
      "name": "save",
      "longname": "DexStorage#save",
      "memberof": "DexStorage",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000890",
      "___s": true
    },
    {
      "comment": "/**\n   * @function\n   * @description Get Data\n   * @param {Object} params Parameters\n   * @param {String} params.cid CID String, if image blob info \n   * @returns {String} data (Hash to be used to access the params.data later)\n   */",
      "meta": {
        "range": [
          1129,
          1536
        ],
        "filename": "IPFS.js",
        "lineno": 38,
        "columnno": 3,
        "path": "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/utils",
        "code": {
          "id": "astnode100009318",
          "name": "DexStorage#get",
          "type": "MethodDefinition",
          "paramnames": [
            ""
          ]
        },
        "vars": {
          "": null
        }
      },
      "kind": "function",
      "description": "Get Data",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Parameters",
          "name": "params"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "CID String, if image blob info",
          "name": "params.cid"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "data (Hash to be used to access the params.data later)"
        }
      ],
      "name": "get",
      "longname": "DexStorage#get",
      "memberof": "DexStorage",
      "scope": "instance",
      "async": true,
      "___id": "T000002R000898",
      "___s": true
    },
    {
      "kind": "package",
      "longname": "package:undefined",
      "files": [
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/Application.js",
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/Web3Connection.js",
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/index.js",
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/interfaces/index.js",
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO/Network.js",
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/BEPRO/NetworkFactory.js",
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20/ERC20Contract.js",
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC20/ERC20TokenLock.js",
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721/ERC721Collectibles.js",
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/ERC721/ERC721Standard.js",
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/IContract.js",
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Staking/StakingContract.js",
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/Voting/VotingContract.js",
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/custom/RealFvr/OpenerRealFvr.js",
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/models/index.js",
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/utils/Account.js",
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/utils/Contract.js",
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/utils/IPFS.js",
        "/home/runner/work/bepro-docs/bepro-docs/bepro-src/src/utils/Numbers.js"
      ],
      "___id": "T000002R000945",
      "___s": true
    }
  ]
}